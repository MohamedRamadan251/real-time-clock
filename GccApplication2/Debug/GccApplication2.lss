
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000177e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  0000177e  00001812  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000d2  008000d2  00001884  2**0
                  ALLOC
  3 .stab         000026dc  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007d0  00000000  00000000  00003f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004730  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001756  00000000  00000000  00004890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f9  00000000  00000000  00005fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1e  00000000  00000000  000066df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00007400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000660  00000000  00000000  0000779c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3e  00000000  00000000  00007dfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3e       	cpi	r26, 0xE5	; 229
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
      8a:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer_action>:
	volatile u8 L_u8Seconds = 0 ;
	u8 L_u8Minits  = 0 ;
	u8 L_u8Hours   = 0 ;
void Timer_action ( void )
{
	L_u8Seconds ++ ;
      92:	80 91 d4 00 	lds	r24, 0x00D4
      96:	8f 5f       	subi	r24, 0xFF	; 255
      98:	80 93 d4 00 	sts	0x00D4, r24
}
      9c:	08 95       	ret

0000009e <main>:
int main(void)
{
	u8 L_u8FirstDigit = 0 ;
	u8 L_u8SecondDigit = 0 ;
	MTimer_voidInt() ;
      9e:	0e 94 3b 08 	call	0x1076	; 0x1076 <MTimer_voidInt>
	HLCD_voidInit() ;
      a2:	0e 94 5f 04 	call	0x8be	; 0x8be <HLCD_voidInit>
	HKP_voidKpInt() ;
      a6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <HKP_voidKpInt>
	MDIO_voidSetPinDir(DIO_PORTA , DIO_PIN0 , DIO_HIGH) ;
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	60 e0       	ldi	r22, 0x00	; 0
      ae:	41 e0       	ldi	r20, 0x01	; 1
      b0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTA , DIO_PIN1 , DIO_HIGH) ;
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	61 e0       	ldi	r22, 0x01	; 1
      b8:	41 e0       	ldi	r20, 0x01	; 1
      ba:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTA , DIO_PIN2 , DIO_HIGH) ;
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	62 e0       	ldi	r22, 0x02	; 2
      c2:	41 e0       	ldi	r20, 0x01	; 1
      c4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTA , DIO_PIN3 , DIO_HIGH) ;
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	63 e0       	ldi	r22, 0x03	; 3
      cc:	41 e0       	ldi	r20, 0x01	; 1
      ce:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTA , DIO_PIN4 , DIO_HIGH) ;
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	64 e0       	ldi	r22, 0x04	; 4
      d6:	41 e0       	ldi	r20, 0x01	; 1
      d8:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTA , DIO_PIN5 , DIO_HIGH) ;
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	65 e0       	ldi	r22, 0x05	; 5
      e0:	41 e0       	ldi	r20, 0x01	; 1
      e2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTA , DIO_PIN6 , DIO_HIGH) ;
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	66 e0       	ldi	r22, 0x06	; 6
      ea:	41 e0       	ldi	r20, 0x01	; 1
      ec:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTC , DIO_PIN0 , DIO_HIGH) ;
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	41 e0       	ldi	r20, 0x01	; 1
      f6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTC , DIO_PIN1 , DIO_HIGH) ;
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	41 e0       	ldi	r20, 0x01	; 1
     100:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTC , DIO_PIN2 , DIO_HIGH) ;
     104:	83 e0       	ldi	r24, 0x03	; 3
     106:	62 e0       	ldi	r22, 0x02	; 2
     108:	41 e0       	ldi	r20, 0x01	; 1
     10a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTC , DIO_PIN3 , DIO_HIGH) ;
     10e:	83 e0       	ldi	r24, 0x03	; 3
     110:	63 e0       	ldi	r22, 0x03	; 3
     112:	41 e0       	ldi	r20, 0x01	; 1
     114:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTC , DIO_PIN4 , DIO_HIGH) ;
     118:	83 e0       	ldi	r24, 0x03	; 3
     11a:	64 e0       	ldi	r22, 0x04	; 4
     11c:	41 e0       	ldi	r20, 0x01	; 1
     11e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTC , DIO_PIN5 , DIO_HIGH) ;
     122:	83 e0       	ldi	r24, 0x03	; 3
     124:	65 e0       	ldi	r22, 0x05	; 5
     126:	41 e0       	ldi	r20, 0x01	; 1
     128:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
    while(1)
    {
		u8 L_u8ValueSelect = HKP_u8GetPressedKey() ;
		MTimer_voidSetDisiredTime(1 , 1 , Timer_action) ;
     12c:	0f 2e       	mov	r0, r31
     12e:	f9 e4       	ldi	r31, 0x49	; 73
     130:	8f 2e       	mov	r8, r31
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	9f 2e       	mov	r9, r31
     136:	f0 2d       	mov	r31, r0
			MDIO_voidSetPinVal(DIO_PORTA , DIO_PIN6) ;
			HLCD_voidClrScreen() ;
			HLCD_voidMovCursor(1,1) ;
			HLCD_voidMovCursor(1,1) ;
			HLCD_voidMovCursor(1,1) ;
			HLCD_voidDispStr("--:--:--") ;				  
     138:	0f 2e       	mov	r0, r31
     13a:	f0 e6       	ldi	r31, 0x60	; 96
     13c:	4f 2e       	mov	r4, r31
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	5f 2e       	mov	r5, r31
     142:	f0 2d       	mov	r31, r0
			HLCD_voidMovCursor(2 , 1) ;
			HLCD_voidMovCursor(2 , 1) ;
			HLCD_voidMovCursor(2 , 1) ;
			HLCD_voidDispStr("Hours = --") ;
     144:	0f 2e       	mov	r0, r31
     146:	f9 e6       	ldi	r31, 0x69	; 105
     148:	2f 2e       	mov	r2, r31
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	3f 2e       	mov	r3, r31
     14e:	f0 2d       	mov	r31, r0
			HLCD_voidMovCursor(1,1) ;
			HLCD_voidMovCursor(1,1) ;
			HLCD_voidMovCursor(1,1) ;
			HLCD_voidDispIntNum(L_u8Hours/10) ;
			HLCD_voidDispIntNum(L_u8Hours%10) ;
			HLCD_voidDispStr(":") ;
     150:	0f 2e       	mov	r0, r31
     152:	f7 e8       	ldi	r31, 0x87	; 135
     154:	af 2e       	mov	r10, r31
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	bf 2e       	mov	r11, r31
     15a:	f0 2d       	mov	r31, r0
		}
		HLCD_voidClrScreen() ;
		HLCD_voidMovCursor(1,1) ;
		HLCD_voidMovCursor(1,1) ;
		HLCD_voidMovCursor(1,1) ;
		HLCD_voidDispStr("Set 1 to set T") ;
     15c:	0f 2e       	mov	r0, r31
     15e:	fa e9       	ldi	r31, 0x9A	; 154
     160:	6f 2e       	mov	r6, r31
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	7f 2e       	mov	r7, r31
     166:	f0 2d       	mov	r31, r0
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN1) ;
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN2) ;
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN3) ;
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN4) ;
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN5) ;
       	MDIO_voidSetPortVal(DIO_PORTA , R_u8SsdData [L_u8Seconds % 10]) ;
     168:	09 ea       	ldi	r16, 0xA9	; 169
     16a:	10 e0       	ldi	r17, 0x00	; 0
	MDIO_voidSetPinDir(DIO_PORTC , DIO_PIN3 , DIO_HIGH) ;
	MDIO_voidSetPinDir(DIO_PORTC , DIO_PIN4 , DIO_HIGH) ;
	MDIO_voidSetPinDir(DIO_PORTC , DIO_PIN5 , DIO_HIGH) ;
    while(1)
    {
		u8 L_u8ValueSelect = HKP_u8GetPressedKey() ;
     16c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <HKP_u8GetPressedKey>
     170:	c8 2f       	mov	r28, r24
		MTimer_voidSetDisiredTime(1 , 1 , Timer_action) ;
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	40 e0       	ldi	r20, 0x00	; 0
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	60 e8       	ldi	r22, 0x80	; 128
     17a:	7f e3       	ldi	r23, 0x3F	; 63
     17c:	94 01       	movw	r18, r8
     17e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <MTimer_voidSetDisiredTime>
		if (L_u8ValueSelect == '1') 
     182:	c1 33       	cpi	r28, 0x31	; 49
     184:	09 f0       	breq	.+2      	; 0x188 <main+0xea>
     186:	b6 c1       	rjmp	.+876    	; 0x4f4 <main+0x456>
		{
			MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN0) ;
     188:	83 e0       	ldi	r24, 0x03	; 3
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN1) ;
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN2) ;
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	62 e0       	ldi	r22, 0x02	; 2
     19c:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN3) ;
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	63 e0       	ldi	r22, 0x03	; 3
     1a4:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN4) ;
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	64 e0       	ldi	r22, 0x04	; 4
     1ac:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN5) ;
     1b0:	83 e0       	ldi	r24, 0x03	; 3
     1b2:	65 e0       	ldi	r22, 0x05	; 5
     1b4:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTA , DIO_PIN0) ;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTA , DIO_PIN1) ;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	61 e0       	ldi	r22, 0x01	; 1
     1c4:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTA , DIO_PIN2) ;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	62 e0       	ldi	r22, 0x02	; 2
     1cc:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTA , DIO_PIN3) ;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	63 e0       	ldi	r22, 0x03	; 3
     1d4:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTA , DIO_PIN4) ;
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	64 e0       	ldi	r22, 0x04	; 4
     1dc:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidClrPinVal(DIO_PORTA , DIO_PIN5) ;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	65 e0       	ldi	r22, 0x05	; 5
     1e4:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
			MDIO_voidSetPinVal(DIO_PORTA , DIO_PIN6) ;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	66 e0       	ldi	r22, 0x06	; 6
     1ec:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
			HLCD_voidClrScreen() ;
     1f0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HLCD_voidClrScreen>
			HLCD_voidMovCursor(1,1) ;
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(1,1) ;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(1,1) ;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispStr("--:--:--") ;				  
     20c:	c2 01       	movw	r24, r4
     20e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
			HLCD_voidMovCursor(2 , 1) ;
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	61 e0       	ldi	r22, 0x01	; 1
     216:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(2 , 1) ;
     21a:	82 e0       	ldi	r24, 0x02	; 2
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(2 , 1) ;
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispStr("Hours = --") ;
     22a:	c1 01       	movw	r24, r2
     22c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
			HLCD_voidMovCursor(2 , 9) ;
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	69 e0       	ldi	r22, 0x09	; 9
     234:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			do 
			{
				u8 L_u8Value = HKP_u8GetPressedKey() ;
     238:	0e 94 dd 03 	call	0x7ba	; 0x7ba <HKP_u8GetPressedKey>
				if (L_u8Value < '3' && L_u8Value >= '0')
     23c:	c8 2f       	mov	r28, r24
     23e:	c0 53       	subi	r28, 0x30	; 48
     240:	c3 30       	cpi	r28, 0x03	; 3
     242:	d0 f7       	brcc	.-12     	; 0x238 <main+0x19a>
				{
					L_u8FirstDigit = L_u8Value - '0' ;
					break ;
				}
			} while (1);
			HLCD_voidDispIntNum(L_u8FirstDigit) ;
     244:	cc 2e       	mov	r12, r28
     246:	dd 24       	eor	r13, r13
     248:	ee 24       	eor	r14, r14
     24a:	ff 24       	eor	r15, r15
     24c:	c7 01       	movw	r24, r14
     24e:	b6 01       	movw	r22, r12
     250:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidMovCursor(1,1) ;
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	61 e0       	ldi	r22, 0x01	; 1
     258:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispIntNum(L_u8FirstDigit) ;
     25c:	c7 01       	movw	r24, r14
     25e:	b6 01       	movw	r22, r12
     260:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidMovCursor(2 , 10) ;
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	6a e0       	ldi	r22, 0x0A	; 10
     268:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			do
			{
				u8 L_u8Value = HKP_u8GetPressedKey() ;
     26c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <HKP_u8GetPressedKey>
				if ((L_u8FirstDigit < 2 && L_u8Value <= '9' && L_u8Value >= '0')||(L_u8FirstDigit == 2 && L_u8Value <= '3' && L_u8Value >= '0'))
     270:	c2 30       	cpi	r28, 0x02	; 2
     272:	10 f4       	brcc	.+4      	; 0x278 <main+0x1da>
     274:	8a 33       	cpi	r24, 0x3A	; 58
     276:	20 f0       	brcs	.+8      	; 0x280 <main+0x1e2>
     278:	c2 30       	cpi	r28, 0x02	; 2
     27a:	c1 f7       	brne	.-16     	; 0x26c <main+0x1ce>
     27c:	84 33       	cpi	r24, 0x34	; 52
     27e:	b0 f7       	brcc	.-20     	; 0x26c <main+0x1ce>
     280:	80 33       	cpi	r24, 0x30	; 48
     282:	a0 f3       	brcs	.-24     	; 0x26c <main+0x1ce>
				{
					L_u8SecondDigit = L_u8Value - '0' ;
     284:	d8 2f       	mov	r29, r24
     286:	d0 53       	subi	r29, 0x30	; 48
					break ;
				}
			} while (1);
			HLCD_voidDispIntNum(L_u8SecondDigit) ;
     288:	cd 2e       	mov	r12, r29
     28a:	dd 24       	eor	r13, r13
     28c:	ee 24       	eor	r14, r14
     28e:	ff 24       	eor	r15, r15
     290:	c7 01       	movw	r24, r14
     292:	b6 01       	movw	r22, r12
     294:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidMovCursor(1,2) ;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	62 e0       	ldi	r22, 0x02	; 2
     29c:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispIntNum(L_u8SecondDigit) ;
     2a0:	c7 01       	movw	r24, r14
     2a2:	b6 01       	movw	r22, r12
     2a4:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			L_u8Hours = (L_u8FirstDigit * 10) + L_u8SecondDigit ;
     2a8:	cc 0f       	add	r28, r28
     2aa:	8c 2f       	mov	r24, r28
     2ac:	88 0f       	add	r24, r24
     2ae:	88 0f       	add	r24, r24
     2b0:	c8 0f       	add	r28, r24
     2b2:	dc 0f       	add	r29, r28
     2b4:	d0 93 d2 00 	sts	0x00D2, r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	94 e3       	ldi	r25, 0x34	; 52
     2bc:	ac e0       	ldi	r26, 0x0C	; 12
     2be:	81 50       	subi	r24, 0x01	; 1
     2c0:	90 40       	sbci	r25, 0x00	; 0
     2c2:	a0 40       	sbci	r26, 0x00	; 0
     2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0x220>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x22a>
     2c8:	00 00       	nop
			_delay_ms(500) ;
			HLCD_voidClrScreen() ;
     2ca:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HLCD_voidClrScreen>
			HLCD_voidMovCursor(1,1) ;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	61 e0       	ldi	r22, 0x01	; 1
     2d2:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(1,1) ;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(1,1) ;
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispIntNum(L_u8Hours/10) ;
     2e6:	80 91 d2 00 	lds	r24, 0x00D2
     2ea:	ca e0       	ldi	r28, 0x0A	; 10
     2ec:	6c 2f       	mov	r22, r28
     2ee:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     2f2:	68 2f       	mov	r22, r24
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidDispIntNum(L_u8Hours%10) ;
     2fe:	80 91 d2 00 	lds	r24, 0x00D2
     302:	6c 2f       	mov	r22, r28
     304:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     308:	69 2f       	mov	r22, r25
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidDispStr(":--:--") ;
     314:	84 e7       	ldi	r24, 0x74	; 116
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
			HLCD_voidMovCursor(2 , 1) ;
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(2 , 1) ;
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	61 e0       	ldi	r22, 0x01	; 1
     328:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(2 , 1) ;
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispStr("minute = --") ;
     334:	8b e7       	ldi	r24, 0x7B	; 123
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
			HLCD_voidMovCursor(2 , 10) ;
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	6a e0       	ldi	r22, 0x0A	; 10
     340:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			do
			{
				u8 L_u8Value = HKP_u8GetPressedKey() ;
     344:	0e 94 dd 03 	call	0x7ba	; 0x7ba <HKP_u8GetPressedKey>
				if (L_u8Value < '6' && L_u8Value >= '0')
     348:	d8 2f       	mov	r29, r24
     34a:	d0 53       	subi	r29, 0x30	; 48
     34c:	d6 30       	cpi	r29, 0x06	; 6
     34e:	d0 f7       	brcc	.-12     	; 0x344 <main+0x2a6>
				{
					L_u8FirstDigit = L_u8Value - '0' ;
					break ;
				}
			} while (1);
			HLCD_voidDispIntNum(L_u8FirstDigit) ;
     350:	cd 2e       	mov	r12, r29
     352:	dd 24       	eor	r13, r13
     354:	ee 24       	eor	r14, r14
     356:	ff 24       	eor	r15, r15
     358:	c7 01       	movw	r24, r14
     35a:	b6 01       	movw	r22, r12
     35c:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidMovCursor(1,4) ;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	64 e0       	ldi	r22, 0x04	; 4
     364:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispIntNum(L_u8FirstDigit) ;
     368:	c7 01       	movw	r24, r14
     36a:	b6 01       	movw	r22, r12
     36c:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidMovCursor(2 , 11) ;
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	6b e0       	ldi	r22, 0x0B	; 11
     374:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			do
			{
				u8 L_u8Value = HKP_u8GetPressedKey() ;
     378:	0e 94 dd 03 	call	0x7ba	; 0x7ba <HKP_u8GetPressedKey>
				if (L_u8Value <= '9' && L_u8Value >= '0')
     37c:	c8 2f       	mov	r28, r24
     37e:	c0 53       	subi	r28, 0x30	; 48
     380:	ca 30       	cpi	r28, 0x0A	; 10
     382:	d0 f7       	brcc	.-12     	; 0x378 <main+0x2da>
				{
					L_u8SecondDigit = L_u8Value - '0' ;
					break ;
				}
			} while (1);
			HLCD_voidDispIntNum(L_u8SecondDigit) ;
     384:	cc 2e       	mov	r12, r28
     386:	dd 24       	eor	r13, r13
     388:	ee 24       	eor	r14, r14
     38a:	ff 24       	eor	r15, r15
     38c:	c7 01       	movw	r24, r14
     38e:	b6 01       	movw	r22, r12
     390:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidMovCursor(1,5) ;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	65 e0       	ldi	r22, 0x05	; 5
     398:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispIntNum(L_u8SecondDigit) ;
     39c:	c7 01       	movw	r24, r14
     39e:	b6 01       	movw	r22, r12
     3a0:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			L_u8Minits = (L_u8FirstDigit * 10) + L_u8SecondDigit ;
     3a4:	dd 0f       	add	r29, r29
     3a6:	8d 2f       	mov	r24, r29
     3a8:	88 0f       	add	r24, r24
     3aa:	88 0f       	add	r24, r24
     3ac:	d8 0f       	add	r29, r24
     3ae:	cd 0f       	add	r28, r29
     3b0:	c0 93 d3 00 	sts	0x00D3, r28
     3b4:	8f ef       	ldi	r24, 0xFF	; 255
     3b6:	94 e3       	ldi	r25, 0x34	; 52
     3b8:	ac e0       	ldi	r26, 0x0C	; 12
     3ba:	81 50       	subi	r24, 0x01	; 1
     3bc:	90 40       	sbci	r25, 0x00	; 0
     3be:	a0 40       	sbci	r26, 0x00	; 0
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x31c>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x326>
     3c4:	00 00       	nop
			_delay_ms(500) ;
			HLCD_voidClrScreen() ;
     3c6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HLCD_voidClrScreen>
			HLCD_voidMovCursor(1,1) ;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(1,1) ;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(1,1) ;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispIntNum(L_u8Hours/10) ;
     3e2:	80 91 d2 00 	lds	r24, 0x00D2
     3e6:	ca e0       	ldi	r28, 0x0A	; 10
     3e8:	6c 2f       	mov	r22, r28
     3ea:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     3ee:	68 2f       	mov	r22, r24
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidDispIntNum(L_u8Hours%10) ;
     3fa:	80 91 d2 00 	lds	r24, 0x00D2
     3fe:	6c 2f       	mov	r22, r28
     400:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     404:	69 2f       	mov	r22, r25
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidDispStr(":") ;
     410:	c5 01       	movw	r24, r10
     412:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
			HLCD_voidDispIntNum(L_u8Minits/10) ;
     416:	80 91 d3 00 	lds	r24, 0x00D3
     41a:	6c 2f       	mov	r22, r28
     41c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     420:	68 2f       	mov	r22, r24
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidDispIntNum(L_u8Minits%10) ;
     42c:	80 91 d3 00 	lds	r24, 0x00D3
     430:	6c 2f       	mov	r22, r28
     432:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     436:	69 2f       	mov	r22, r25
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidDispStr(":--") ;
     442:	89 e8       	ldi	r24, 0x89	; 137
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
			HLCD_voidMovCursor(2 , 1) ;
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(2 , 1) ;
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidMovCursor(2 , 1) ;
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispStr("seconds = --") ;
     462:	8d e8       	ldi	r24, 0x8D	; 141
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
			HLCD_voidMovCursor(2 , 11) ;
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	6b e0       	ldi	r22, 0x0B	; 11
     46e:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			do
			{
				u8 L_u8Value = HKP_u8GetPressedKey() ;
     472:	0e 94 dd 03 	call	0x7ba	; 0x7ba <HKP_u8GetPressedKey>
				if (L_u8Value < '6' && L_u8Value >= '0')
     476:	d8 2f       	mov	r29, r24
     478:	d0 53       	subi	r29, 0x30	; 48
     47a:	d6 30       	cpi	r29, 0x06	; 6
     47c:	d0 f7       	brcc	.-12     	; 0x472 <main+0x3d4>
				{
					L_u8FirstDigit = L_u8Value - '0' ;
					break ;
				}
			} while (1);
			HLCD_voidDispIntNum(L_u8FirstDigit) ;
     47e:	cd 2e       	mov	r12, r29
     480:	dd 24       	eor	r13, r13
     482:	ee 24       	eor	r14, r14
     484:	ff 24       	eor	r15, r15
     486:	c7 01       	movw	r24, r14
     488:	b6 01       	movw	r22, r12
     48a:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidMovCursor(1,7) ;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	67 e0       	ldi	r22, 0x07	; 7
     492:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispIntNum(L_u8FirstDigit) ;
     496:	c7 01       	movw	r24, r14
     498:	b6 01       	movw	r22, r12
     49a:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidMovCursor(2,12) ;
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	6c e0       	ldi	r22, 0x0C	; 12
     4a2:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			do
			{
				u8 L_u8Value = HKP_u8GetPressedKey() ;
     4a6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <HKP_u8GetPressedKey>
				if (L_u8Value <= '9' && L_u8Value >= '0')
     4aa:	c8 2f       	mov	r28, r24
     4ac:	c0 53       	subi	r28, 0x30	; 48
     4ae:	ca 30       	cpi	r28, 0x0A	; 10
     4b0:	d0 f7       	brcc	.-12     	; 0x4a6 <main+0x408>
				{
					L_u8SecondDigit = L_u8Value - '0' ;
					break ;
				}
			} while (1);
			HLCD_voidDispIntNum(L_u8SecondDigit) ;
     4b2:	cc 2e       	mov	r12, r28
     4b4:	dd 24       	eor	r13, r13
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	c7 01       	movw	r24, r14
     4bc:	b6 01       	movw	r22, r12
     4be:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			HLCD_voidMovCursor(1,8) ;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	68 e0       	ldi	r22, 0x08	; 8
     4c6:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
			HLCD_voidDispIntNum(L_u8SecondDigit) ;
     4ca:	c7 01       	movw	r24, r14
     4cc:	b6 01       	movw	r22, r12
     4ce:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
			L_u8Seconds = (L_u8FirstDigit * 10) + L_u8SecondDigit ;
     4d2:	dd 0f       	add	r29, r29
     4d4:	8d 2f       	mov	r24, r29
     4d6:	88 0f       	add	r24, r24
     4d8:	88 0f       	add	r24, r24
     4da:	d8 0f       	add	r29, r24
     4dc:	cd 0f       	add	r28, r29
     4de:	c0 93 d4 00 	sts	0x00D4, r28
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	94 e3       	ldi	r25, 0x34	; 52
     4e6:	ac e0       	ldi	r26, 0x0C	; 12
     4e8:	81 50       	subi	r24, 0x01	; 1
     4ea:	90 40       	sbci	r25, 0x00	; 0
     4ec:	a0 40       	sbci	r26, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <main+0x44a>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x454>
     4f2:	00 00       	nop
			_delay_ms(500) ;
		}
		if (L_u8Seconds == 60)
     4f4:	80 91 d4 00 	lds	r24, 0x00D4
     4f8:	8c 33       	cpi	r24, 0x3C	; 60
     4fa:	39 f4       	brne	.+14     	; 0x50a <main+0x46c>
		{
			L_u8Minits ++ ;
     4fc:	80 91 d3 00 	lds	r24, 0x00D3
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	80 93 d3 00 	sts	0x00D3, r24
			L_u8Seconds = 0 ;
     506:	10 92 d4 00 	sts	0x00D4, r1
		}
		if (L_u8Minits == 60)
     50a:	80 91 d3 00 	lds	r24, 0x00D3
     50e:	8c 33       	cpi	r24, 0x3C	; 60
     510:	39 f4       	brne	.+14     	; 0x520 <main+0x482>
		{
			L_u8Hours ++ ;
     512:	80 91 d2 00 	lds	r24, 0x00D2
     516:	8f 5f       	subi	r24, 0xFF	; 255
     518:	80 93 d2 00 	sts	0x00D2, r24
			L_u8Minits = 0 ;
     51c:	10 92 d3 00 	sts	0x00D3, r1
		}
		if (L_u8Hours == 24)
     520:	80 91 d2 00 	lds	r24, 0x00D2
     524:	88 31       	cpi	r24, 0x18	; 24
     526:	31 f4       	brne	.+12     	; 0x534 <main+0x496>
		{
			L_u8Hours = 0 ;
     528:	10 92 d2 00 	sts	0x00D2, r1
			L_u8Minits = 0 ;
     52c:	10 92 d3 00 	sts	0x00D3, r1
			L_u8Seconds = 0 ;
     530:	10 92 d4 00 	sts	0x00D4, r1
		}
		HLCD_voidClrScreen() ;
     534:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HLCD_voidClrScreen>
		HLCD_voidMovCursor(1,1) ;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
		HLCD_voidMovCursor(1,1) ;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
		HLCD_voidMovCursor(1,1) ;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
		HLCD_voidDispStr("Set 1 to set T") ;
     550:	c3 01       	movw	r24, r6
     552:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
		HLCD_voidMovCursor(2,1) ;
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
		HLCD_voidMovCursor(2,1) ;
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
		HLCD_voidMovCursor(2,1) ;
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
		HLCD_voidDispIntNum(L_u8Hours) ;
     56e:	60 91 d2 00 	lds	r22, 0x00D2
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
		HLCD_voidDispStr(":") ;
     57c:	c5 01       	movw	r24, r10
     57e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
		HLCD_voidDispIntNum(L_u8Minits) ;
     582:	60 91 d3 00 	lds	r22, 0x00D3
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
		HLCD_voidDispStr(":") ;
     590:	c5 01       	movw	r24, r10
     592:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
		HLCD_voidDispIntNum(L_u8Seconds) ;
     596:	60 91 d4 00 	lds	r22, 0x00D4
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
		MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN0) ;
     5a4:	83 e0       	ldi	r24, 0x03	; 3
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN1) ;
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN2) ;
     5b4:	83 e0       	ldi	r24, 0x03	; 3
     5b6:	62 e0       	ldi	r22, 0x02	; 2
     5b8:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN3) ;
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	63 e0       	ldi	r22, 0x03	; 3
     5c0:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN4) ;
     5c4:	83 e0       	ldi	r24, 0x03	; 3
     5c6:	64 e0       	ldi	r22, 0x04	; 4
     5c8:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN5) ;
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	65 e0       	ldi	r22, 0x05	; 5
     5d0:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
       	MDIO_voidSetPortVal(DIO_PORTA , R_u8SsdData [L_u8Seconds % 10]) ;
     5d4:	80 91 d4 00 	lds	r24, 0x00D4
     5d8:	ca e0       	ldi	r28, 0x0A	; 10
     5da:	6c 2f       	mov	r22, r28
     5dc:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     5e0:	f8 01       	movw	r30, r16
     5e2:	e9 0f       	add	r30, r25
     5e4:	f1 1d       	adc	r31, r1
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	60 81       	ld	r22, Z
     5ea:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MDIO_voidSetPortVal>
     5ee:	af e3       	ldi	r26, 0x3F	; 63
     5f0:	bf e1       	ldi	r27, 0x1F	; 31
     5f2:	11 97       	sbiw	r26, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <main+0x554>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <main+0x55a>
     5f8:	00 00       	nop
		_delay_ms(4) ;
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN0) ;
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN1) ;
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN2) ;
     60a:	83 e0       	ldi	r24, 0x03	; 3
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN3) ;
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN4) ;
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	64 e0       	ldi	r22, 0x04	; 4
     61e:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN5) ;
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	65 e0       	ldi	r22, 0x05	; 5
     626:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPortVal(DIO_PORTA , R_u8SsdData [L_u8Seconds / 10]) ; 
     62a:	80 91 d4 00 	lds	r24, 0x00D4
     62e:	6c 2f       	mov	r22, r28
     630:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     634:	f8 01       	movw	r30, r16
     636:	e8 0f       	add	r30, r24
     638:	f1 1d       	adc	r31, r1
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	60 81       	ld	r22, Z
     63e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MDIO_voidSetPortVal>
     642:	8f e3       	ldi	r24, 0x3F	; 63
     644:	9f e1       	ldi	r25, 0x1F	; 31
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <main+0x5a8>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <main+0x5ae>
     64c:	00 00       	nop
		_delay_ms(4) ; 
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN0) ;
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN1) ;
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN2) ;
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	62 e0       	ldi	r22, 0x02	; 2
     662:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN3) ;
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	63 e0       	ldi	r22, 0x03	; 3
     66a:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN4) ;
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	64 e0       	ldi	r22, 0x04	; 4
     672:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN5) ;
     676:	83 e0       	ldi	r24, 0x03	; 3
     678:	65 e0       	ldi	r22, 0x05	; 5
     67a:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPortVal(DIO_PORTA , R_u8SsdData [L_u8Minits % 10]) ; 
     67e:	80 91 d3 00 	lds	r24, 0x00D3
     682:	6c 2f       	mov	r22, r28
     684:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     688:	f8 01       	movw	r30, r16
     68a:	e9 0f       	add	r30, r25
     68c:	f1 1d       	adc	r31, r1
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	60 81       	ld	r22, Z
     692:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MDIO_voidSetPortVal>
     696:	af e3       	ldi	r26, 0x3F	; 63
     698:	bf e1       	ldi	r27, 0x1F	; 31
     69a:	11 97       	sbiw	r26, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <main+0x5fc>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <main+0x602>
     6a0:	00 00       	nop
		_delay_ms(4) ;
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN0) ;
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN1) ;
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN2) ;
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	62 e0       	ldi	r22, 0x02	; 2
     6b6:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN3) ;
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	63 e0       	ldi	r22, 0x03	; 3
     6be:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN4) ;
     6c2:	83 e0       	ldi	r24, 0x03	; 3
     6c4:	64 e0       	ldi	r22, 0x04	; 4
     6c6:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN5) ;
     6ca:	83 e0       	ldi	r24, 0x03	; 3
     6cc:	65 e0       	ldi	r22, 0x05	; 5
     6ce:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPortVal(DIO_PORTA , R_u8SsdData [L_u8Minits / 10]) ; 
     6d2:	80 91 d3 00 	lds	r24, 0x00D3
     6d6:	6c 2f       	mov	r22, r28
     6d8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     6dc:	f8 01       	movw	r30, r16
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	60 81       	ld	r22, Z
     6e6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MDIO_voidSetPortVal>
     6ea:	8f e3       	ldi	r24, 0x3F	; 63
     6ec:	9f e1       	ldi	r25, 0x1F	; 31
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <main+0x650>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <main+0x656>
     6f4:	00 00       	nop
		_delay_ms(4) ;
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN0) ;
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN1) ;
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN2) ;
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	62 e0       	ldi	r22, 0x02	; 2
     70a:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN3) ;
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	63 e0       	ldi	r22, 0x03	; 3
     712:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN4) ;
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	64 e0       	ldi	r22, 0x04	; 4
     71a:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN5) ;
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	65 e0       	ldi	r22, 0x05	; 5
     722:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPortVal(DIO_PORTA , R_u8SsdData [L_u8Hours % 10]) ; 
     726:	80 91 d2 00 	lds	r24, 0x00D2
     72a:	6c 2f       	mov	r22, r28
     72c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     730:	f8 01       	movw	r30, r16
     732:	e9 0f       	add	r30, r25
     734:	f1 1d       	adc	r31, r1
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	60 81       	ld	r22, Z
     73a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MDIO_voidSetPortVal>
     73e:	af e3       	ldi	r26, 0x3F	; 63
     740:	bf e1       	ldi	r27, 0x1F	; 31
     742:	11 97       	sbiw	r26, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <main+0x6a4>
     746:	00 c0       	rjmp	.+0      	; 0x748 <main+0x6aa>
     748:	00 00       	nop
		_delay_ms(4) ;
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN0) ;
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN1) ;
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN2) ;
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	62 e0       	ldi	r22, 0x02	; 2
     75e:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN3) ;
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	63 e0       	ldi	r22, 0x03	; 3
     766:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidSetPinVal(DIO_PORTC , DIO_PIN4) ;
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	64 e0       	ldi	r22, 0x04	; 4
     76e:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		MDIO_voidClrPinVal(DIO_PORTC , DIO_PIN5) ;
     772:	83 e0       	ldi	r24, 0x03	; 3
     774:	65 e0       	ldi	r22, 0x05	; 5
     776:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
		MDIO_voidSetPortVal(DIO_PORTA , R_u8SsdData [L_u8Hours / 10]) ; 
     77a:	80 91 d2 00 	lds	r24, 0x00D2
     77e:	6c 2f       	mov	r22, r28
     780:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodqi4>
     784:	f8 01       	movw	r30, r16
     786:	e8 0f       	add	r30, r24
     788:	f1 1d       	adc	r31, r1
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	60 81       	ld	r22, Z
     78e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MDIO_voidSetPortVal>
     792:	8f e3       	ldi	r24, 0x3F	; 63
     794:	9f e1       	ldi	r25, 0x1F	; 31
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <main+0x6f8>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <main+0x6fe>
     79c:	00 00       	nop
     79e:	e6 cc       	rjmp	.-1588   	; 0x16c <main+0xce>

000007a0 <HKP_voidKpInt>:
{
	/* Set Columns as Output & High */
	#if   COL_START == DIO_PIN0 && ROW_START == DIO_PIN4
	      /** first four pins of port are output
	          second four pins of port are input */   
	      MDIO_voidSetPortDir (KP_PORT , LOW_NIBBLE_OUTPUT) ;
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	6f e0       	ldi	r22, 0x0F	; 15
     7a4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <MDIO_voidSetPortDir>
	
	/** Set Rows as Inputs & Pulled up */
	#if   ROW_START == DIO_PIN4 && COL_START == DIO_PIN0
	      /** first four pins of port are output
	          second four pins of port are input */
	      MDIO_voidSetPortDir (KP_PORT , LOW_NIBBLE_OUTPUT) ;
     7a8:	84 e0       	ldi	r24, 0x04	; 4
     7aa:	6f e0       	ldi	r22, 0x0F	; 15
     7ac:	0e 94 ff 06 	call	0xdfe	; 0xdfe <MDIO_voidSetPortDir>
		  
		  /** first four pins of port are high
	          and  active internal pullup for second four pins of port */
	      MDIO_voidSetPortVal (KP_PORT , ALL_PINS_ONE) ;
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	6f ef       	ldi	r22, 0xFF	; 255
     7b4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MDIO_voidSetPortVal>
		      and first four pins of port are high */
	      MDIO_voidSetPortVal (KP_PORT , ALL_PINS_ONE) ;
	#else
		#error "Select right connections of Column start and Row start"
	#endif
}
     7b8:	08 95       	ret

000007ba <HKP_u8GetPressedKey>:

u8 HKP_u8GetPressedKey (void)
{
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ee 24       	eor	r14, r14
     7ca:	ff 24       	eor	r15, r15
	u8 L_u8Column ;
	u8 L_u8Row    ;
    u8 L_u8PinVal ;
    u8 L_u8PressedKey = NOT_PRESSED;
     7cc:	df ef       	ldi	r29, 0xFF	; 255
		/**active current column by make it output low */
		MDIO_voidClrPinVal (KP_PORT , L_u8Column) ;
		
		/**internal loop to loop to each row 
		   and check pressed key that common current row and current column */
		for (L_u8Row = ROW_START ; L_u8Row <= ROW_END ; L_u8Row ++)
     7ce:	de 2c       	mov	r13, r14
	
	/**external loop to active current column that be checked */
	for (L_u8Column = COL_START ; L_u8Column <= COL_END ; L_u8Column ++)
	{
		/**active current column by make it output low */
		MDIO_voidClrPinVal (KP_PORT , L_u8Column) ;
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	6e 2d       	mov	r22, r14
     7d4:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
	#else
		#error "Select right connections of Column start and Row start"
	#endif
}

u8 HKP_u8GetPressedKey (void)
     7d8:	87 01       	movw	r16, r14
     7da:	00 0f       	add	r16, r16
     7dc:	11 1f       	adc	r17, r17
     7de:	00 0f       	add	r16, r16
     7e0:	11 1f       	adc	r17, r17
     7e2:	0d 54       	subi	r16, 0x4D	; 77
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
		/**active current column by make it output low */
		MDIO_voidClrPinVal (KP_PORT , L_u8Column) ;
		
		/**internal loop to loop to each row 
		   and check pressed key that common current row and current column */
		for (L_u8Row = ROW_START ; L_u8Row <= ROW_END ; L_u8Row ++)
     7e6:	c4 e0       	ldi	r28, 0x04	; 4
		{
			
			/** read value of key that common current row and current column */
			L_u8PinVal = MDIO_u8GetPinVal (KP_PORT , L_u8Row) ;
     7e8:	84 e0       	ldi	r24, 0x04	; 4
     7ea:	6c 2f       	mov	r22, r28
     7ec:	0e 94 90 06 	call	0xd20	; 0xd20 <MDIO_u8GetPinVal>
			
			/** if key is pressed ====> (MDIO_u8GetPinVal == 0) */
			if (L_u8PinVal == PRESSED)
     7f0:	88 23       	and	r24, r24
     7f2:	71 f4       	brne	.+28     	; 0x810 <HKP_u8GetPressedKey+0x56>
			{
				/**get the value of the pressed key*/
				L_u8PressedKey = G_u8SwitchVal [L_u8Column - COL_START][L_u8Row - ROW_START] ;
     7f4:	f8 01       	movw	r30, r16
     7f6:	d0 81       	ld	r29, Z
				
				/**wait untill leave the button */
				while (MDIO_u8GetPinVal (KP_PORT , L_u8Row) == PRESSED) ;
     7f8:	84 e0       	ldi	r24, 0x04	; 4
     7fa:	6c 2f       	mov	r22, r28
     7fc:	0e 94 90 06 	call	0xd20	; 0xd20 <MDIO_u8GetPinVal>
     800:	88 23       	and	r24, r24
     802:	d1 f3       	breq	.-12     	; 0x7f8 <HKP_u8GetPressedKey+0x3e>
     804:	8f e3       	ldi	r24, 0x3F	; 63
     806:	9c e9       	ldi	r25, 0x9C	; 156
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	f1 f7       	brne	.-4      	; 0x808 <HKP_u8GetPressedKey+0x4e>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <HKP_u8GetPressedKey+0x54>
     80e:	00 00       	nop
		/**active current column by make it output low */
		MDIO_voidClrPinVal (KP_PORT , L_u8Column) ;
		
		/**internal loop to loop to each row 
		   and check pressed key that common current row and current column */
		for (L_u8Row = ROW_START ; L_u8Row <= ROW_END ; L_u8Row ++)
     810:	cf 5f       	subi	r28, 0xFF	; 255
     812:	0f 5f       	subi	r16, 0xFF	; 255
     814:	1f 4f       	sbci	r17, 0xFF	; 255
     816:	c8 30       	cpi	r28, 0x08	; 8
     818:	39 f7       	brne	.-50     	; 0x7e8 <HKP_u8GetPressedKey+0x2e>
				_delay_ms (DELAY_FOR_DRBOUNCING) ;
			}
		}
		
		/**deactive current column by make it output low */
		MDIO_voidSetPinVal (KP_PORT , L_u8Column) ;
     81a:	84 e0       	ldi	r24, 0x04	; 4
     81c:	6d 2d       	mov	r22, r13
     81e:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
     822:	08 94       	sec
     824:	e1 1c       	adc	r14, r1
     826:	f1 1c       	adc	r15, r1
	u8 L_u8Row    ;
    u8 L_u8PinVal ;
    u8 L_u8PressedKey = NOT_PRESSED;
	
	/**external loop to active current column that be checked */
	for (L_u8Column = COL_START ; L_u8Column <= COL_END ; L_u8Column ++)
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	e9 16       	cp	r14, r25
     82c:	f1 04       	cpc	r15, r1
     82e:	79 f6       	brne	.-98     	; 0x7ce <HKP_u8GetPressedKey+0x14>
		
		/**deactive current column by make it output low */
		MDIO_voidSetPinVal (KP_PORT , L_u8Column) ;
	}
	return L_u8PressedKey ;
}
     830:	8d 2f       	mov	r24, r29
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	08 95       	ret

00000842 <HLCD_voidSendCmd>:
#include <util/delay.h>
#include "LCD_conf.h"
#include "LCD_private.h"

void HLCD_voidSendCmd(u8 A_u8CmdID)
{
     842:	cf 93       	push	r28
     844:	c8 2f       	mov	r28, r24
	    _delay_ms (1) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	
	    /**set register select to low */
	    MDIO_voidClrPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
		
		/**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	62 e0       	ldi	r22, 0x02	; 2
     852:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
		
		/**set enable to high */
	    MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
     85e:	89 ef       	ldi	r24, 0xF9	; 249
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <__stack+0x3>
     866:	00 c0       	rjmp	.+0      	; 0x868 <__stack+0x9>
     868:	00 00       	nop
		
		/* Wait for E to settle */
		_delay_ms (1) ;
		
		/**send last four bits of data to last four bit at control register */
		MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8CmdID >> FOUR_BITS) ;
     86a:	6c 2f       	mov	r22, r28
     86c:	62 95       	swap	r22
     86e:	6f 70       	andi	r22, 0x0F	; 15
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	0e 94 06 08 	call	0x100c	; 0x100c <MDIO_voidWriteHighNibble>
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
     87e:	89 ef       	ldi	r24, 0xF9	; 249
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <__stack+0x23>
     886:	00 c0       	rjmp	.+0      	; 0x888 <__stack+0x29>
     888:	00 00       	nop
		
		/* Wait for E to settle */
	    _delay_ms (1) ;
		
		/**set enable to high */
		MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
     892:	89 ef       	ldi	r24, 0xF9	; 249
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <__stack+0x37>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <__stack+0x3d>
     89c:	00 00       	nop
		
		/* Wait for E to settle */
		_delay_ms (1) ;
		
		/**send first four bits of data to first four bit at control register */
		MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8CmdID) ;
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	6c 2f       	mov	r22, r28
     8a2:	0e 94 06 08 	call	0x100c	; 0x100c <MDIO_voidWriteHighNibble>
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
     8ae:	89 ef       	ldi	r24, 0xF9	; 249
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__stack+0x53>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
     8b8:	00 00       	nop
		/* Wait for E to settle */
	    _delay_ms (1) ;
	#else 
		 #error "select write mode"
	#endif
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <HLCD_voidInit>:
	    _delay_ms (1) ;
		
	#elif MODE == FOUR_BIT_CONNECTION
	
	    /** set direction of DIO_PIN4 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN4 , DIO_HIGH) ;
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	64 e0       	ldi	r22, 0x04	; 4
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN5 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN5 , DIO_HIGH) ;
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	65 e0       	ldi	r22, 0x05	; 5
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN6 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN6 , DIO_HIGH) ;
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	66 e0       	ldi	r22, 0x06	; 6
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN7 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN7 , DIO_HIGH) ;
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	67 e0       	ldi	r22, 0x07	; 7
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
		
	    /** set direction of register select to be output */
	    MDIO_voidSetPinDir  (LCD_RS_PORT   , LCD_RS_PIN  , DIO_HIGH) ;
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	41 e0       	ldi	r20, 0x01	; 1
     8ec:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
		
		/** set direction of Enable pin to be output */
	    MDIO_voidSetPinDir  (LCD_EN_PORT   , LCD_EN_PIN  , DIO_HIGH) ;
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>

		/** set direction of read/write pin to be output */
	    MDIO_voidSetPinDir  (LCD_RW_PORT   , LCD_RW_PIN  , DIO_HIGH) ;
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	62 e0       	ldi	r22, 0x02	; 2
     8fe:	41 e0       	ldi	r20, 0x01	; 1
     900:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_voidSetPinDir>
     904:	8f e0       	ldi	r24, 0x0F	; 15
     906:	97 e2       	ldi	r25, 0x27	; 39
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <HLCD_voidInit+0x4a>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <HLCD_voidInit+0x50>
     90e:	00 00       	nop
		
	    /** Wait for more than 30ms after VDD rise to 4.5v */
	    _delay_ms (40) ;
	    
	    /** Return home*/
	    HLCD_voidSendCmd (CMD_RETURN_HOME) ;
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	0e 94 21 04 	call	0x842	; 0x842 <HLCD_voidSendCmd>
     916:	83 ec       	ldi	r24, 0xC3	; 195
     918:	99 e0       	ldi	r25, 0x09	; 9
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <HLCD_voidInit+0x5c>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <HLCD_voidInit+0x62>
     920:	00 00       	nop
		
		/* Wait for command to settle */
	    _delay_ms (10) ;
	    
	    /** function set */
	    HLCD_voidSendCmd (FOUR_BIT_CONNECTION) ;
     922:	88 e2       	ldi	r24, 0x28	; 40
     924:	0e 94 21 04 	call	0x842	; 0x842 <HLCD_voidSendCmd>
     928:	89 ef       	ldi	r24, 0xF9	; 249
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <HLCD_voidInit+0x6e>
     930:	00 c0       	rjmp	.+0      	; 0x932 <HLCD_voidInit+0x74>
     932:	00 00       	nop
		
		/* Wait for command to settle */
	    _delay_ms (1) ;
	    
	    /** Display ON/OFF Control */
	    HLCD_voidSendCmd (CMD_CURSOR_OFF_DISPLAY_ON) ;
     934:	8c e0       	ldi	r24, 0x0C	; 12
     936:	0e 94 21 04 	call	0x842	; 0x842 <HLCD_voidSendCmd>
     93a:	89 ef       	ldi	r24, 0xF9	; 249
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <HLCD_voidInit+0x80>
     942:	00 c0       	rjmp	.+0      	; 0x944 <HLCD_voidInit+0x86>
     944:	00 00       	nop
		
		/* Wait for command to settle */
	    _delay_ms (1) ;
	    
	    /** Display Clear */
	    HLCD_voidSendCmd (CMD_CLEAR) ;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 21 04 	call	0x842	; 0x842 <HLCD_voidSendCmd>
     94c:	83 ec       	ldi	r24, 0xC3	; 195
     94e:	99 e0       	ldi	r25, 0x09	; 9
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <HLCD_voidInit+0x92>
     954:	00 c0       	rjmp	.+0      	; 0x956 <HLCD_voidInit+0x98>
     956:	00 00       	nop
		
		/* Wait for command to settle */
	    _delay_ms (10) ;
	    
	    /** Entry mode set */
	    HLCD_voidSendCmd (CMD_ENTRY_MODE) ;
     958:	86 e0       	ldi	r24, 0x06	; 6
     95a:	0e 94 21 04 	call	0x842	; 0x842 <HLCD_voidSendCmd>
     95e:	89 ef       	ldi	r24, 0xF9	; 249
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <HLCD_voidInit+0xa4>
     966:	00 c0       	rjmp	.+0      	; 0x968 <HLCD_voidInit+0xaa>
     968:	00 00       	nop
		/* Wait for command to settle */
	    _delay_ms (1) ;
	#else 
		#error "selecct right mode"
	#endif
}
     96a:	08 95       	ret

0000096c <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Char)
{
     96c:	cf 93       	push	r28
     96e:	c8 2f       	mov	r28, r24
	    _delay_ms (1) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	    
		/**set register select to low */
	    MDIO_voidSetPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
		
		/**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	62 e0       	ldi	r22, 0x02	; 2
     97c:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
		
		/**set enable to high */
	    MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
     988:	89 ef       	ldi	r24, 0xF9	; 249
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <HLCD_voidSendData+0x20>
     990:	00 c0       	rjmp	.+0      	; 0x992 <HLCD_voidSendData+0x26>
     992:	00 00       	nop
		
		/* Wait for E to settle */
		_delay_ms (1) ;
		
		/**send last four bits of data to last four bit at control register */
		MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8Char >> FOUR_BITS) ;
     994:	6c 2f       	mov	r22, r28
     996:	62 95       	swap	r22
     998:	6f 70       	andi	r22, 0x0F	; 15
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	0e 94 06 08 	call	0x100c	; 0x100c <MDIO_voidWriteHighNibble>
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
     9a8:	89 ef       	ldi	r24, 0xF9	; 249
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <HLCD_voidSendData+0x40>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <HLCD_voidSendData+0x46>
     9b2:	00 00       	nop
		
		/* Wait for E to settle */
	    _delay_ms (1) ;
		
		/**set enable to high */
		MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
     9bc:	89 ef       	ldi	r24, 0xF9	; 249
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <HLCD_voidSendData+0x54>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <HLCD_voidSendData+0x5a>
     9c6:	00 00       	nop
		
		/* Wait for E to settle */
		_delay_ms (1) ;
		
		/**send first four bits of data to first four bit at control register */
		MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8Char) ;
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	6c 2f       	mov	r22, r28
     9cc:	0e 94 06 08 	call	0x100c	; 0x100c <MDIO_voidWriteHighNibble>
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
     9d8:	89 ef       	ldi	r24, 0xF9	; 249
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	f1 f7       	brne	.-4      	; 0x9dc <HLCD_voidSendData+0x70>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <HLCD_voidSendData+0x76>
     9e2:	00 00       	nop
		/* Wait for E to settle */
	    _delay_ms (1) ;
	#else 
		 #error "select write mode"
	#endif
}
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <HLCD_voidDispStr>:

void HLCD_voidDispStr(u8* A_Pu8String)
{
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	8c 01       	movw	r16, r24
	/**Local loop index */
	u8 L_u8Index = 0 ;
	while (A_Pu8String [L_u8Index] != '\0')
     9f0:	fc 01       	movw	r30, r24
     9f2:	80 81       	ld	r24, Z
     9f4:	88 23       	and	r24, r24
     9f6:	51 f0       	breq	.+20     	; 0xa0c <HLCD_voidDispStr+0x24>
}

void HLCD_voidDispStr(u8* A_Pu8String)
{
	/**Local loop index */
	u8 L_u8Index = 0 ;
     9f8:	c0 e0       	ldi	r28, 0x00	; 0
	while (A_Pu8String [L_u8Index] != '\0')
	{
		/* Write Character on LCD */
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
     9fa:	0e 94 b6 04 	call	0x96c	; 0x96c <HLCD_voidSendData>
		
		/* Increment local loop index */
		L_u8Index ++ ;
     9fe:	cf 5f       	subi	r28, 0xFF	; 255

void HLCD_voidDispStr(u8* A_Pu8String)
{
	/**Local loop index */
	u8 L_u8Index = 0 ;
	while (A_Pu8String [L_u8Index] != '\0')
     a00:	f8 01       	movw	r30, r16
     a02:	ec 0f       	add	r30, r28
     a04:	f1 1d       	adc	r31, r1
     a06:	80 81       	ld	r24, Z
     a08:	88 23       	and	r24, r24
     a0a:	b9 f7       	brne	.-18     	; 0x9fa <HLCD_voidDispStr+0x12>
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
		
		/* Increment local loop index */
		L_u8Index ++ ;
	}
}
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <HLCD_voidMovCursor>:
	u8 L_u8DDRAMAddress ;
	
	/**if the row and col are out of range 
	         *** Do nothing
	  */
	if (A_u8RowId >= MIN_NUM_OF_ROW && A_u8RowId <= MAX_NUM_OF_ROW &&
     a14:	28 2f       	mov	r18, r24
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	22 30       	cpi	r18, 0x02	; 2
     a1a:	80 f4       	brcc	.+32     	; 0xa3c <HLCD_voidMovCursor+0x28>
     a1c:	66 23       	and	r22, r22
     a1e:	71 f0       	breq	.+28     	; 0xa3c <HLCD_voidMovCursor+0x28>
	A_u8ColId >= MIN_NUM_OF_COL && A_u8ColId <= MAX_NUM_OF_COL)
     a20:	61 31       	cpi	r22, 0x11	; 17
     a22:	60 f4       	brcc	.+24     	; 0xa3c <HLCD_voidMovCursor+0x28>
	{
		/**for first row*/
		if (A_u8RowId == LCD_ROW1)
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	19 f4       	brne	.+6      	; 0xa2e <HLCD_voidMovCursor+0x1a>
		{
			L_u8DDRAMAddress = FIRST_ROW_ADDRESS + A_u8ColId - 1 ;
     a28:	96 2f       	mov	r25, r22
     a2a:	91 58       	subi	r25, 0x81	; 129
     a2c:	04 c0       	rjmp	.+8      	; 0xa36 <HLCD_voidMovCursor+0x22>
		}
		
		/**for second row*/
		else if (A_u8RowId == LCD_ROW2)
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	11 f4       	brne	.+4      	; 0xa36 <HLCD_voidMovCursor+0x22>
		{
			L_u8DDRAMAddress = SECOND_ROW_ADDRESS + A_u8ColId - 1 ;
     a32:	96 2f       	mov	r25, r22
     a34:	91 54       	subi	r25, 0x41	; 65
		}
		
		/**set DDRAM address*/
		HLCD_voidSendCmd (L_u8DDRAMAddress) ;
     a36:	89 2f       	mov	r24, r25
     a38:	0e 94 21 04 	call	0x842	; 0x842 <HLCD_voidSendCmd>
     a3c:	08 95       	ret

00000a3e <HLCD_voidClrScreen>:
}

void HLCD_voidClrScreen (void)
{
	/**clear data and move cursor to first position*/
	HLCD_voidSendCmd (CMD_CLEAR) ;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	0e 94 21 04 	call	0x842	; 0x842 <HLCD_voidSendCmd>
}
     a44:	08 95       	ret

00000a46 <HLCD_voidDispIntNum>:
		L_u8Index ++ ;
	}
}

void HLCD_voidDispIntNum(u32 A_u32Number)
{
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	a0 97       	sbiw	r28, 0x20	; 32
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
	if (A_u32Number < MIN_INT_NUM && A_u32Number > MAX_INT_NUM)
     a5e:	8b 01       	movw	r16, r22
     a60:	9c 01       	movw	r18, r24
     a62:	00 50       	subi	r16, 0x00	; 0
     a64:	1a 4c       	sbci	r17, 0xCA	; 202
     a66:	2a 49       	sbci	r18, 0x9A	; 154
     a68:	3b 43       	sbci	r19, 0x3B	; 59
     a6a:	01 30       	cpi	r16, 0x01	; 1
     a6c:	4c e6       	ldi	r20, 0x6C	; 108
     a6e:	14 07       	cpc	r17, r20
     a70:	4a ec       	ldi	r20, 0xCA	; 202
     a72:	24 07       	cpc	r18, r20
     a74:	48 e8       	ldi	r20, 0x88	; 136
     a76:	34 07       	cpc	r19, r20
     a78:	38 f4       	brcc	.+14     	; 0xa88 <HLCD_voidDispIntNum+0x42>
	{
		/**
		 * if the integer is more than MAX_INT_NUM or less than MIN_INT_NUM
		          **** "Overflow !!!!" will be displayed
		 */
		HLCD_voidClrScreen () ;
     a7a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HLCD_voidClrScreen>
		HLCD_voidDispStr ("Overflow !!!!") ;
     a7e:	83 ec       	ldi	r24, 0xC3	; 195
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
     a86:	10 c0       	rjmp	.+32     	; 0xaa8 <HLCD_voidDispIntNum+0x62>
	}
	else
	{
		/**array to stored conversion character*/
	    s8* L_Ps8String [16] = {0} ;
     a88:	8e 01       	movw	r16, r28
     a8a:	0f 5f       	subi	r16, 0xFF	; 255
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	20 e2       	ldi	r18, 0x20	; 32
     a90:	f8 01       	movw	r30, r16
     a92:	11 92       	st	Z+, r1
     a94:	2a 95       	dec	r18
     a96:	e9 f7       	brne	.-6      	; 0xa92 <HLCD_voidDispIntNum+0x4c>

		/** convert integer to string*/
	    ltoa (A_u32Number , (s8*)L_Ps8String , BASE) ;
     a98:	a8 01       	movw	r20, r16
     a9a:	2a e0       	ldi	r18, 0x0A	; 10
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <ltoa>

		/**display number after convesion*/
	    HLCD_voidDispStr ((u8*)L_Ps8String) ;
     aa2:	c8 01       	movw	r24, r16
     aa4:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <HLCD_voidDispStr>
	}
}
     aa8:	a0 96       	adiw	r28, 0x20	; 32
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	08 95       	ret

00000abe <HLCD_voidDispFloatNum>:

void HLCD_voidDispFloatNum(f32 A_f32Number , u8 A_u8AfterDigit)
{
     abe:	8f 92       	push	r8
     ac0:	9f 92       	push	r9
     ac2:	af 92       	push	r10
     ac4:	bf 92       	push	r11
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	4b 01       	movw	r8, r22
     ad6:	5c 01       	movw	r10, r24
     ad8:	14 2f       	mov	r17, r20
	u16 L_u16AfterDigit = 1 ;
	u8  L_u8Iterator = 0 ;
	/** display integer part */
    HLCD_voidDispIntNum ((u32)A_f32Number) ;
     ada:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fixunssfsi>
     ade:	6b 01       	movw	r12, r22
     ae0:	7c 01       	movw	r14, r24
     ae2:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>

	/** display dot */
	HLCD_voidSendData   (',') ;
     ae6:	8c e2       	ldi	r24, 0x2C	; 44
     ae8:	0e 94 b6 04 	call	0x96c	; 0x96c <HLCD_voidSendData>

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
     aec:	11 23       	and	r17, r17
     aee:	91 f0       	breq	.+36     	; 0xb14 <HLCD_voidDispFloatNum+0x56>
     af0:	20 e0       	ldi	r18, 0x00	; 0
	}
}

void HLCD_voidDispFloatNum(f32 A_f32Number , u8 A_u8AfterDigit)
{
	u16 L_u16AfterDigit = 1 ;
     af2:	c1 e0       	ldi	r28, 0x01	; 1
     af4:	d0 e0       	ldi	r29, 0x00	; 0
	/** display dot */
	HLCD_voidSendData   (',') ;

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
	{
		L_u16AfterDigit = L_u16AfterDigit * BASE ;
     af6:	ce 01       	movw	r24, r28
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	cc 0f       	add	r28, r28
     afe:	dd 1f       	adc	r29, r29
     b00:	cc 0f       	add	r28, r28
     b02:	dd 1f       	adc	r29, r29
     b04:	cc 0f       	add	r28, r28
     b06:	dd 1f       	adc	r29, r29
     b08:	c8 0f       	add	r28, r24
     b0a:	d9 1f       	adc	r29, r25
    HLCD_voidDispIntNum ((u32)A_f32Number) ;

	/** display dot */
	HLCD_voidSendData   (',') ;

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
     b0c:	2f 5f       	subi	r18, 0xFF	; 255
     b0e:	21 17       	cp	r18, r17
     b10:	91 f7       	brne	.-28     	; 0xaf6 <HLCD_voidDispFloatNum+0x38>
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <HLCD_voidDispFloatNum+0x5a>
	}
}

void HLCD_voidDispFloatNum(f32 A_f32Number , u8 A_u8AfterDigit)
{
	u16 L_u16AfterDigit = 1 ;
     b14:	c1 e0       	ldi	r28, 0x01	; 1
     b16:	d0 e0       	ldi	r29, 0x00	; 0
	{
		L_u16AfterDigit = L_u16AfterDigit * BASE ;
	}

	/** display fraction part */
	HLCD_voidDispIntNum ((A_f32Number - (u32) A_f32Number) * L_u16AfterDigit) ;
     b18:	c7 01       	movw	r24, r14
     b1a:	b6 01       	movw	r22, r12
     b1c:	0e 94 36 0a 	call	0x146c	; 0x146c <__floatunsisf>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	c5 01       	movw	r24, r10
     b26:	b4 01       	movw	r22, r8
     b28:	0e 94 39 09 	call	0x1272	; 0x1272 <__subsf3>
     b2c:	6b 01       	movw	r12, r22
     b2e:	7c 01       	movw	r14, r24
     b30:	be 01       	movw	r22, r28
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 36 0a 	call	0x146c	; 0x146c <__floatunsisf>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
     b3e:	c7 01       	movw	r24, r14
     b40:	b6 01       	movw	r22, r12
     b42:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__mulsf3>
     b46:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fixunssfsi>
     b4a:	0e 94 23 05 	call	0xa46	; 0xa46 <HLCD_voidDispIntNum>
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	bf 90       	pop	r11
     b5e:	af 90       	pop	r10
     b60:	9f 90       	pop	r9
     b62:	8f 90       	pop	r8
     b64:	08 95       	ret

00000b66 <HLCD_voidShiftDisplayRight>:
}

void HLCD_voidShiftDisplayRight(void)
{
	/**shift display to right*/
	HLCD_voidSendCmd (SHIFT_DISPLAY_TO_RIGHT) ;
     b66:	8c e1       	ldi	r24, 0x1C	; 28
     b68:	0e 94 21 04 	call	0x842	; 0x842 <HLCD_voidSendCmd>
}
     b6c:	08 95       	ret

00000b6e <HLCD_voidShiftDisplayLeft>:

void HLCD_voidShiftDisplayLeft(void)
{
	/**shift display to left*/
	HLCD_voidSendCmd (SHIFT_DISPLAY_TO_LEFT) ;
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	0e 94 21 04 	call	0x842	; 0x842 <HLCD_voidSendCmd>
}
     b74:	08 95       	ret

00000b76 <HLCD_voidDispSpecialChar>:

void HLCD_voidDispSpecialChar(u8 * A_u8Array, u8 A_u8Block, u8 A_u8RowId, u8 A_u8ColId)
{
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	08 2f       	mov	r16, r24
     b86:	f9 2e       	mov	r15, r25
     b88:	16 2f       	mov	r17, r22
     b8a:	e4 2e       	mov	r14, r20
     b8c:	d2 2e       	mov	r13, r18
	/**iterator for for loop*/
	u8 L_u8Iterator ;
	
	/**set CGRAM address (001x xxxx) */
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) | SET_CGRAM_ADDRESS) ;
     b8e:	86 2f       	mov	r24, r22
     b90:	88 0f       	add	r24, r24
     b92:	88 0f       	add	r24, r24
     b94:	88 0f       	add	r24, r24
     b96:	80 64       	ori	r24, 0x40	; 64
     b98:	0e 94 21 04 	call	0x842	; 0x842 <HLCD_voidSendCmd>
     b9c:	c0 2f       	mov	r28, r16
     b9e:	df 2d       	mov	r29, r15
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
     ba0:	00 e0       	ldi	r16, 0x00	; 0
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
		 L_u8Iterator ++ )
		 {
			 HLCD_voidSendData (A_u8Array [L_u8Iterator]) ;
     ba2:	89 91       	ld	r24, Y+
     ba4:	0e 94 b6 04 	call	0x96c	; 0x96c <HLCD_voidSendData>
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) | SET_CGRAM_ADDRESS) ;
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
		 L_u8Iterator ++ )
     ba8:	0f 5f       	subi	r16, 0xFF	; 255
	
	/**set CGRAM address (001x xxxx) */
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) | SET_CGRAM_ADDRESS) ;
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
     baa:	08 30       	cpi	r16, 0x08	; 8
     bac:	d1 f7       	brne	.-12     	; 0xba2 <HLCD_voidDispSpecialChar+0x2c>
		 {
			 HLCD_voidSendData (A_u8Array [L_u8Iterator]) ;
		 }
    
	/* Move the cursor to required position */
	HLCD_voidMovCursor (A_u8RowId , A_u8ColId) ;
     bae:	8e 2d       	mov	r24, r14
     bb0:	6d 2d       	mov	r22, r13
     bb2:	0e 94 0a 05 	call	0xa14	; 0xa14 <HLCD_voidMovCursor>
	
	/* Set the block to be displayed */
	HLCD_voidSendData (A_u8Block) ;
     bb6:	81 2f       	mov	r24, r17
     bb8:	0e 94 b6 04 	call	0x96c	; 0x96c <HLCD_voidSendData>
}
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <MDIO_voidSetPinDir>:
#include "../../LIB/BIT_MATH.h"
#include "DIO_int.h"

void MDIO_voidSetPinDir (u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8PinDir)
{
	switch (A_u8PortNo)
     bcc:	82 30       	cpi	r24, 0x02	; 2
     bce:	19 f1       	breq	.+70     	; 0xc16 <MDIO_voidSetPinDir+0x4a>
     bd0:	83 30       	cpi	r24, 0x03	; 3
     bd2:	20 f4       	brcc	.+8      	; 0xbdc <MDIO_voidSetPinDir+0x10>
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	09 f0       	breq	.+2      	; 0xbda <MDIO_voidSetPinDir+0xe>
     bd8:	62 c0       	rjmp	.+196    	; 0xc9e <MDIO_voidSetPinDir+0xd2>
     bda:	06 c0       	rjmp	.+12     	; 0xbe8 <MDIO_voidSetPinDir+0x1c>
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	91 f1       	breq	.+100    	; 0xc44 <MDIO_voidSetPinDir+0x78>
     be0:	84 30       	cpi	r24, 0x04	; 4
     be2:	09 f0       	breq	.+2      	; 0xbe6 <MDIO_voidSetPinDir+0x1a>
     be4:	5c c0       	rjmp	.+184    	; 0xc9e <MDIO_voidSetPinDir+0xd2>
     be6:	45 c0       	rjmp	.+138    	; 0xc72 <MDIO_voidSetPinDir+0xa6>
	    {
	    case DIO_PORTA : WRT_BIT(DDRA , A_u8PinNo , A_u8PinDir) ; break ;
     be8:	5a b3       	in	r21, 0x1a	; 26
     bea:	21 e0       	ldi	r18, 0x01	; 1
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	c9 01       	movw	r24, r18
     bf0:	06 2e       	mov	r0, r22
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <MDIO_voidSetPinDir+0x2c>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <MDIO_voidSetPinDir+0x28>
     bfc:	80 95       	com	r24
     bfe:	85 23       	and	r24, r21
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	9a 01       	movw	r18, r20
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <MDIO_voidSetPinDir+0x3e>
     c06:	22 0f       	add	r18, r18
     c08:	33 1f       	adc	r19, r19
     c0a:	6a 95       	dec	r22
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <MDIO_voidSetPinDir+0x3a>
     c0e:	b9 01       	movw	r22, r18
     c10:	68 2b       	or	r22, r24
     c12:	6a bb       	out	0x1a, r22	; 26
     c14:	08 95       	ret
	    case DIO_PORTB : WRT_BIT(DDRB , A_u8PinNo , A_u8PinDir) ; break ;
     c16:	57 b3       	in	r21, 0x17	; 23
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	c9 01       	movw	r24, r18
     c1e:	06 2e       	mov	r0, r22
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <MDIO_voidSetPinDir+0x5a>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	0a 94       	dec	r0
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <MDIO_voidSetPinDir+0x56>
     c2a:	80 95       	com	r24
     c2c:	85 23       	and	r24, r21
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	9a 01       	movw	r18, r20
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <MDIO_voidSetPinDir+0x6c>
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	6a 95       	dec	r22
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <MDIO_voidSetPinDir+0x68>
     c3c:	b9 01       	movw	r22, r18
     c3e:	68 2b       	or	r22, r24
     c40:	67 bb       	out	0x17, r22	; 23
     c42:	08 95       	ret
	    case DIO_PORTC : WRT_BIT(DDRC , A_u8PinNo , A_u8PinDir) ; break ;
     c44:	54 b3       	in	r21, 0x14	; 20
     c46:	21 e0       	ldi	r18, 0x01	; 1
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	c9 01       	movw	r24, r18
     c4c:	06 2e       	mov	r0, r22
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <MDIO_voidSetPinDir+0x88>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <MDIO_voidSetPinDir+0x84>
     c58:	80 95       	com	r24
     c5a:	85 23       	and	r24, r21
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	9a 01       	movw	r18, r20
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <MDIO_voidSetPinDir+0x9a>
     c62:	22 0f       	add	r18, r18
     c64:	33 1f       	adc	r19, r19
     c66:	6a 95       	dec	r22
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <MDIO_voidSetPinDir+0x96>
     c6a:	b9 01       	movw	r22, r18
     c6c:	68 2b       	or	r22, r24
     c6e:	64 bb       	out	0x14, r22	; 20
     c70:	08 95       	ret
	    case DIO_PORTD : WRT_BIT(DDRD , A_u8PinNo , A_u8PinDir) ; break ;
     c72:	51 b3       	in	r21, 0x11	; 17
     c74:	21 e0       	ldi	r18, 0x01	; 1
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	c9 01       	movw	r24, r18
     c7a:	06 2e       	mov	r0, r22
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <MDIO_voidSetPinDir+0xb6>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <MDIO_voidSetPinDir+0xb2>
     c86:	80 95       	com	r24
     c88:	85 23       	and	r24, r21
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	9a 01       	movw	r18, r20
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <MDIO_voidSetPinDir+0xc8>
     c90:	22 0f       	add	r18, r18
     c92:	33 1f       	adc	r19, r19
     c94:	6a 95       	dec	r22
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <MDIO_voidSetPinDir+0xc4>
     c98:	b9 01       	movw	r22, r18
     c9a:	68 2b       	or	r22, r24
     c9c:	61 bb       	out	0x11, r22	; 17
     c9e:	08 95       	ret

00000ca0 <MDIO_voidSetPinVal>:
	    }
}

void MDIO_voidSetPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
	switch (A_u8PortNo)
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	b9 f0       	breq	.+46     	; 0xcd2 <MDIO_voidSetPinVal+0x32>
     ca4:	83 30       	cpi	r24, 0x03	; 3
     ca6:	18 f4       	brcc	.+6      	; 0xcae <MDIO_voidSetPinVal+0xe>
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	c9 f5       	brne	.+114    	; 0xd1e <MDIO_voidSetPinVal+0x7e>
     cac:	05 c0       	rjmp	.+10     	; 0xcb8 <MDIO_voidSetPinVal+0x18>
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	e9 f0       	breq	.+58     	; 0xcec <MDIO_voidSetPinVal+0x4c>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	a1 f5       	brne	.+104    	; 0xd1e <MDIO_voidSetPinVal+0x7e>
     cb6:	27 c0       	rjmp	.+78     	; 0xd06 <MDIO_voidSetPinVal+0x66>
		{
		case DIO_PORTA : SET_BIT(PORTA , A_u8PinNo ) ; break ;
     cb8:	2b b3       	in	r18, 0x1b	; 27
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	ac 01       	movw	r20, r24
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <MDIO_voidSetPinVal+0x26>
     cc2:	44 0f       	add	r20, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	6a 95       	dec	r22
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <MDIO_voidSetPinVal+0x22>
     cca:	ba 01       	movw	r22, r20
     ccc:	62 2b       	or	r22, r18
     cce:	6b bb       	out	0x1b, r22	; 27
     cd0:	08 95       	ret
		case DIO_PORTB : SET_BIT(PORTB , A_u8PinNo ) ; break ;
     cd2:	28 b3       	in	r18, 0x18	; 24
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	ac 01       	movw	r20, r24
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <MDIO_voidSetPinVal+0x40>
     cdc:	44 0f       	add	r20, r20
     cde:	55 1f       	adc	r21, r21
     ce0:	6a 95       	dec	r22
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <MDIO_voidSetPinVal+0x3c>
     ce4:	ba 01       	movw	r22, r20
     ce6:	62 2b       	or	r22, r18
     ce8:	68 bb       	out	0x18, r22	; 24
     cea:	08 95       	ret
		case DIO_PORTC : SET_BIT(PORTC , A_u8PinNo ) ; break ;
     cec:	25 b3       	in	r18, 0x15	; 21
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	ac 01       	movw	r20, r24
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <MDIO_voidSetPinVal+0x5a>
     cf6:	44 0f       	add	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	6a 95       	dec	r22
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <MDIO_voidSetPinVal+0x56>
     cfe:	ba 01       	movw	r22, r20
     d00:	62 2b       	or	r22, r18
     d02:	65 bb       	out	0x15, r22	; 21
     d04:	08 95       	ret
		case DIO_PORTD : SET_BIT(PORTD , A_u8PinNo ) ; break ;
     d06:	22 b3       	in	r18, 0x12	; 18
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	ac 01       	movw	r20, r24
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <MDIO_voidSetPinVal+0x74>
     d10:	44 0f       	add	r20, r20
     d12:	55 1f       	adc	r21, r21
     d14:	6a 95       	dec	r22
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <MDIO_voidSetPinVal+0x70>
     d18:	ba 01       	movw	r22, r20
     d1a:	62 2b       	or	r22, r18
     d1c:	62 bb       	out	0x12, r22	; 18
     d1e:	08 95       	ret

00000d20 <MDIO_u8GetPinVal>:
}

u8   MDIO_u8GetPinVal   (u8 A_u8PortNo , u8 A_u8PinNo)
{
	u8 L_u8PinVal ;
	switch (A_u8PortNo)
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	f9 f0       	breq	.+62     	; 0xd62 <MDIO_u8GetPinVal+0x42>
     d24:	83 30       	cpi	r24, 0x03	; 3
     d26:	20 f4       	brcc	.+8      	; 0xd30 <MDIO_u8GetPinVal+0x10>
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	09 f0       	breq	.+2      	; 0xd2e <MDIO_u8GetPinVal+0xe>
     d2c:	52 c0       	rjmp	.+164    	; 0xdd2 <MDIO_u8GetPinVal+0xb2>
     d2e:	06 c0       	rjmp	.+12     	; 0xd3c <MDIO_u8GetPinVal+0x1c>
     d30:	83 30       	cpi	r24, 0x03	; 3
     d32:	51 f1       	breq	.+84     	; 0xd88 <MDIO_u8GetPinVal+0x68>
     d34:	84 30       	cpi	r24, 0x04	; 4
     d36:	09 f0       	breq	.+2      	; 0xd3a <MDIO_u8GetPinVal+0x1a>
     d38:	4c c0       	rjmp	.+152    	; 0xdd2 <MDIO_u8GetPinVal+0xb2>
     d3a:	39 c0       	rjmp	.+114    	; 0xdae <MDIO_u8GetPinVal+0x8e>
		{
		case DIO_PORTA : L_u8PinVal = READ_BIT(PINA , A_u8PinNo) ; break ;
     d3c:	29 b3       	in	r18, 0x19	; 25
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	06 2e       	mov	r0, r22
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <MDIO_u8GetPinVal+0x2a>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <MDIO_u8GetPinVal+0x26>
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	82 23       	and	r24, r18
     d52:	93 23       	and	r25, r19
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <MDIO_u8GetPinVal+0x3a>
     d56:	95 95       	asr	r25
     d58:	87 95       	ror	r24
     d5a:	6a 95       	dec	r22
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <MDIO_u8GetPinVal+0x36>
     d5e:	98 2f       	mov	r25, r24
     d60:	38 c0       	rjmp	.+112    	; 0xdd2 <MDIO_u8GetPinVal+0xb2>
		case DIO_PORTB : L_u8PinVal = READ_BIT(PINB , A_u8PinNo) ; break ;
     d62:	26 b3       	in	r18, 0x16	; 22
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	06 2e       	mov	r0, r22
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <MDIO_u8GetPinVal+0x50>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <MDIO_u8GetPinVal+0x4c>
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	82 23       	and	r24, r18
     d78:	93 23       	and	r25, r19
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <MDIO_u8GetPinVal+0x60>
     d7c:	95 95       	asr	r25
     d7e:	87 95       	ror	r24
     d80:	6a 95       	dec	r22
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <MDIO_u8GetPinVal+0x5c>
     d84:	98 2f       	mov	r25, r24
     d86:	25 c0       	rjmp	.+74     	; 0xdd2 <MDIO_u8GetPinVal+0xb2>
		case DIO_PORTC : L_u8PinVal = READ_BIT(PINC , A_u8PinNo) ; break ;
     d88:	23 b3       	in	r18, 0x13	; 19
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	06 2e       	mov	r0, r22
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <MDIO_u8GetPinVal+0x76>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <MDIO_u8GetPinVal+0x72>
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	82 23       	and	r24, r18
     d9e:	93 23       	and	r25, r19
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <MDIO_u8GetPinVal+0x86>
     da2:	95 95       	asr	r25
     da4:	87 95       	ror	r24
     da6:	6a 95       	dec	r22
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <MDIO_u8GetPinVal+0x82>
     daa:	98 2f       	mov	r25, r24
     dac:	12 c0       	rjmp	.+36     	; 0xdd2 <MDIO_u8GetPinVal+0xb2>
		case DIO_PORTD : L_u8PinVal = READ_BIT(PIND , A_u8PinNo) ; break ;
     dae:	20 b3       	in	r18, 0x10	; 16
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	06 2e       	mov	r0, r22
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <MDIO_u8GetPinVal+0x9c>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <MDIO_u8GetPinVal+0x98>
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	82 23       	and	r24, r18
     dc4:	93 23       	and	r25, r19
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <MDIO_u8GetPinVal+0xac>
     dc8:	95 95       	asr	r25
     dca:	87 95       	ror	r24
     dcc:	6a 95       	dec	r22
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <MDIO_u8GetPinVal+0xa8>
     dd0:	98 2f       	mov	r25, r24
		default : /**Error*/ break ;
		}
	return L_u8PinVal ;
}
     dd2:	89 2f       	mov	r24, r25
     dd4:	08 95       	ret

00000dd6 <MDIO_voidSetPortVal>:

void MDIO_voidSetPortVal (u8 A_u8PortNo , u8 A_u8PortVal)
{
	switch (A_u8PortNo)
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	61 f0       	breq	.+24     	; 0xdf2 <MDIO_voidSetPortVal+0x1c>
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	18 f4       	brcc	.+6      	; 0xde4 <MDIO_voidSetPortVal+0xe>
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	69 f4       	brne	.+26     	; 0xdfc <MDIO_voidSetPortVal+0x26>
     de2:	05 c0       	rjmp	.+10     	; 0xdee <MDIO_voidSetPortVal+0x18>
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	39 f0       	breq	.+14     	; 0xdf6 <MDIO_voidSetPortVal+0x20>
     de8:	84 30       	cpi	r24, 0x04	; 4
     dea:	41 f4       	brne	.+16     	; 0xdfc <MDIO_voidSetPortVal+0x26>
     dec:	06 c0       	rjmp	.+12     	; 0xdfa <MDIO_voidSetPortVal+0x24>
		{
		case DIO_PORTA : PORTA = A_u8PortVal  ; break ;
     dee:	6b bb       	out	0x1b, r22	; 27
     df0:	08 95       	ret
		case DIO_PORTB : PORTB = A_u8PortVal  ; break ;
     df2:	68 bb       	out	0x18, r22	; 24
     df4:	08 95       	ret
		case DIO_PORTC : PORTC = A_u8PortVal  ; break ;
     df6:	65 bb       	out	0x15, r22	; 21
     df8:	08 95       	ret
		case DIO_PORTD : PORTD = A_u8PortVal  ; break ;
     dfa:	62 bb       	out	0x12, r22	; 18
     dfc:	08 95       	ret

00000dfe <MDIO_voidSetPortDir>:
		}
}

void MDIO_voidSetPortDir (u8 A_u8PortNo , u8 A_u8PortVal)
{
	switch (A_u8PortNo)
     dfe:	82 30       	cpi	r24, 0x02	; 2
     e00:	61 f0       	breq	.+24     	; 0xe1a <MDIO_voidSetPortDir+0x1c>
     e02:	83 30       	cpi	r24, 0x03	; 3
     e04:	18 f4       	brcc	.+6      	; 0xe0c <MDIO_voidSetPortDir+0xe>
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	69 f4       	brne	.+26     	; 0xe24 <MDIO_voidSetPortDir+0x26>
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <MDIO_voidSetPortDir+0x18>
     e0c:	83 30       	cpi	r24, 0x03	; 3
     e0e:	39 f0       	breq	.+14     	; 0xe1e <MDIO_voidSetPortDir+0x20>
     e10:	84 30       	cpi	r24, 0x04	; 4
     e12:	41 f4       	brne	.+16     	; 0xe24 <MDIO_voidSetPortDir+0x26>
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <MDIO_voidSetPortDir+0x24>
		{
		case DIO_PORTA : DDRA = A_u8PortVal  ; break ;
     e16:	6a bb       	out	0x1a, r22	; 26
     e18:	08 95       	ret
		case DIO_PORTB : DDRB = A_u8PortVal  ; break ;
     e1a:	67 bb       	out	0x17, r22	; 23
     e1c:	08 95       	ret
		case DIO_PORTC : DDRC = A_u8PortVal  ; break ;
     e1e:	64 bb       	out	0x14, r22	; 20
     e20:	08 95       	ret
		case DIO_PORTD : DDRD = A_u8PortVal  ; break ;
     e22:	61 bb       	out	0x11, r22	; 17
     e24:	08 95       	ret

00000e26 <MDIO_u8GetPortVal>:
}

u8   MDIO_u8GetPortVal   (u8 A_u8PortNo)
{
	u8 L_u8PinVal ;
	switch (A_u8PortNo)
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	61 f0       	breq	.+24     	; 0xe42 <MDIO_u8GetPortVal+0x1c>
     e2a:	83 30       	cpi	r24, 0x03	; 3
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <MDIO_u8GetPortVal+0xe>
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	69 f4       	brne	.+26     	; 0xe4c <MDIO_u8GetPortVal+0x26>
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <MDIO_u8GetPortVal+0x18>
     e34:	83 30       	cpi	r24, 0x03	; 3
     e36:	39 f0       	breq	.+14     	; 0xe46 <MDIO_u8GetPortVal+0x20>
     e38:	84 30       	cpi	r24, 0x04	; 4
     e3a:	41 f4       	brne	.+16     	; 0xe4c <MDIO_u8GetPortVal+0x26>
     e3c:	06 c0       	rjmp	.+12     	; 0xe4a <MDIO_u8GetPortVal+0x24>
		{
		case DIO_PORTA : L_u8PinVal = PINA ; break ;
     e3e:	99 b3       	in	r25, 0x19	; 25
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <MDIO_u8GetPortVal+0x26>
		case DIO_PORTB : L_u8PinVal = PINB ; break ;
     e42:	96 b3       	in	r25, 0x16	; 22
     e44:	03 c0       	rjmp	.+6      	; 0xe4c <MDIO_u8GetPortVal+0x26>
		case DIO_PORTC : L_u8PinVal = PINC ; break ;
     e46:	93 b3       	in	r25, 0x13	; 19
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <MDIO_u8GetPortVal+0x26>
		case DIO_PORTD : L_u8PinVal = PIND ; break ;
     e4a:	90 b3       	in	r25, 0x10	; 16
		default : /**Error*/ break ;
		}
	return L_u8PinVal ;
}
     e4c:	89 2f       	mov	r24, r25
     e4e:	08 95       	ret

00000e50 <MDIO_voidClrPinVal>:

void MDIO_voidClrPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
	switch (A_u8PortNo)
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	c9 f0       	breq	.+50     	; 0xe86 <MDIO_voidClrPinVal+0x36>
     e54:	83 30       	cpi	r24, 0x03	; 3
     e56:	20 f4       	brcc	.+8      	; 0xe60 <MDIO_voidClrPinVal+0x10>
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	09 f0       	breq	.+2      	; 0xe5e <MDIO_voidClrPinVal+0xe>
     e5c:	3d c0       	rjmp	.+122    	; 0xed8 <MDIO_voidClrPinVal+0x88>
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <MDIO_voidClrPinVal+0x1a>
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	f9 f0       	breq	.+62     	; 0xea2 <MDIO_voidClrPinVal+0x52>
     e64:	84 30       	cpi	r24, 0x04	; 4
     e66:	c1 f5       	brne	.+112    	; 0xed8 <MDIO_voidClrPinVal+0x88>
     e68:	2a c0       	rjmp	.+84     	; 0xebe <MDIO_voidClrPinVal+0x6e>
		{
		case DIO_PORTA : CLR_BIT(PORTA , A_u8PinNo) ; break ;
     e6a:	2b b3       	in	r18, 0x1b	; 27
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	ac 01       	movw	r20, r24
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <MDIO_voidClrPinVal+0x28>
     e74:	44 0f       	add	r20, r20
     e76:	55 1f       	adc	r21, r21
     e78:	6a 95       	dec	r22
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <MDIO_voidClrPinVal+0x24>
     e7c:	ba 01       	movw	r22, r20
     e7e:	60 95       	com	r22
     e80:	62 23       	and	r22, r18
     e82:	6b bb       	out	0x1b, r22	; 27
     e84:	08 95       	ret
		case DIO_PORTB : CLR_BIT(PORTB , A_u8PinNo) ; break ;
     e86:	28 b3       	in	r18, 0x18	; 24
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	ac 01       	movw	r20, r24
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <MDIO_voidClrPinVal+0x44>
     e90:	44 0f       	add	r20, r20
     e92:	55 1f       	adc	r21, r21
     e94:	6a 95       	dec	r22
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <MDIO_voidClrPinVal+0x40>
     e98:	ba 01       	movw	r22, r20
     e9a:	60 95       	com	r22
     e9c:	62 23       	and	r22, r18
     e9e:	68 bb       	out	0x18, r22	; 24
     ea0:	08 95       	ret
		case DIO_PORTC : CLR_BIT(PORTC , A_u8PinNo) ; break ;
     ea2:	25 b3       	in	r18, 0x15	; 21
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	ac 01       	movw	r20, r24
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <MDIO_voidClrPinVal+0x60>
     eac:	44 0f       	add	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	6a 95       	dec	r22
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <MDIO_voidClrPinVal+0x5c>
     eb4:	ba 01       	movw	r22, r20
     eb6:	60 95       	com	r22
     eb8:	62 23       	and	r22, r18
     eba:	65 bb       	out	0x15, r22	; 21
     ebc:	08 95       	ret
		case DIO_PORTD : CLR_BIT(PORTD , A_u8PinNo) ; break ;
     ebe:	22 b3       	in	r18, 0x12	; 18
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	ac 01       	movw	r20, r24
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <MDIO_voidClrPinVal+0x7c>
     ec8:	44 0f       	add	r20, r20
     eca:	55 1f       	adc	r21, r21
     ecc:	6a 95       	dec	r22
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <MDIO_voidClrPinVal+0x78>
     ed0:	ba 01       	movw	r22, r20
     ed2:	60 95       	com	r22
     ed4:	62 23       	and	r22, r18
     ed6:	62 bb       	out	0x12, r22	; 18
     ed8:	08 95       	ret

00000eda <MDIO_voidClrPort>:
		}
}

void MDIO_voidClrPort (u8 A_u8PortNo)
{
	switch (A_u8PortNo)
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	61 f0       	breq	.+24     	; 0xef6 <MDIO_voidClrPort+0x1c>
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	18 f4       	brcc	.+6      	; 0xee8 <MDIO_voidClrPort+0xe>
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	69 f4       	brne	.+26     	; 0xf00 <MDIO_voidClrPort+0x26>
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <MDIO_voidClrPort+0x18>
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	39 f0       	breq	.+14     	; 0xefa <MDIO_voidClrPort+0x20>
     eec:	84 30       	cpi	r24, 0x04	; 4
     eee:	41 f4       	brne	.+16     	; 0xf00 <MDIO_voidClrPort+0x26>
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <MDIO_voidClrPort+0x24>
		{
		case DIO_PORTA : PORTA = ALL_PINS_ZERO ; break ;
     ef2:	1b ba       	out	0x1b, r1	; 27
     ef4:	08 95       	ret
		case DIO_PORTB : PORTB = ALL_PINS_ZERO ; break ;
     ef6:	18 ba       	out	0x18, r1	; 24
     ef8:	08 95       	ret
		case DIO_PORTC : PORTC = ALL_PINS_ZERO ; break ;
     efa:	15 ba       	out	0x15, r1	; 21
     efc:	08 95       	ret
		case DIO_PORTD : PORTD = ALL_PINS_ZERO ; break ;
     efe:	12 ba       	out	0x12, r1	; 18
     f00:	08 95       	ret

00000f02 <MDIO_voidTogPinVal>:
		}
}

void MDIO_voidTogPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
	switch (A_u8PortNo)
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	b9 f0       	breq	.+46     	; 0xf34 <MDIO_voidTogPinVal+0x32>
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	18 f4       	brcc	.+6      	; 0xf10 <MDIO_voidTogPinVal+0xe>
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	c9 f5       	brne	.+114    	; 0xf80 <MDIO_voidTogPinVal+0x7e>
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <MDIO_voidTogPinVal+0x18>
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	e9 f0       	breq	.+58     	; 0xf4e <MDIO_voidTogPinVal+0x4c>
     f14:	84 30       	cpi	r24, 0x04	; 4
     f16:	a1 f5       	brne	.+104    	; 0xf80 <MDIO_voidTogPinVal+0x7e>
     f18:	27 c0       	rjmp	.+78     	; 0xf68 <MDIO_voidTogPinVal+0x66>
		{
		case DIO_PORTA : TOG_BIT(PORTA , A_u8PinNo) ; break ;
     f1a:	2b b3       	in	r18, 0x1b	; 27
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	ac 01       	movw	r20, r24
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <MDIO_voidTogPinVal+0x26>
     f24:	44 0f       	add	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	6a 95       	dec	r22
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <MDIO_voidTogPinVal+0x22>
     f2c:	ba 01       	movw	r22, r20
     f2e:	62 27       	eor	r22, r18
     f30:	6b bb       	out	0x1b, r22	; 27
     f32:	08 95       	ret
		case DIO_PORTB : TOG_BIT(PORTB , A_u8PinNo) ; break ;
     f34:	28 b3       	in	r18, 0x18	; 24
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	ac 01       	movw	r20, r24
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <MDIO_voidTogPinVal+0x40>
     f3e:	44 0f       	add	r20, r20
     f40:	55 1f       	adc	r21, r21
     f42:	6a 95       	dec	r22
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <MDIO_voidTogPinVal+0x3c>
     f46:	ba 01       	movw	r22, r20
     f48:	62 27       	eor	r22, r18
     f4a:	68 bb       	out	0x18, r22	; 24
     f4c:	08 95       	ret
		case DIO_PORTC : TOG_BIT(PORTC , A_u8PinNo) ; break ;
     f4e:	25 b3       	in	r18, 0x15	; 21
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	ac 01       	movw	r20, r24
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <MDIO_voidTogPinVal+0x5a>
     f58:	44 0f       	add	r20, r20
     f5a:	55 1f       	adc	r21, r21
     f5c:	6a 95       	dec	r22
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <MDIO_voidTogPinVal+0x56>
     f60:	ba 01       	movw	r22, r20
     f62:	62 27       	eor	r22, r18
     f64:	65 bb       	out	0x15, r22	; 21
     f66:	08 95       	ret
		case DIO_PORTD : TOG_BIT(PORTD , A_u8PinNo) ; break ;
     f68:	22 b3       	in	r18, 0x12	; 18
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	ac 01       	movw	r20, r24
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <MDIO_voidTogPinVal+0x74>
     f72:	44 0f       	add	r20, r20
     f74:	55 1f       	adc	r21, r21
     f76:	6a 95       	dec	r22
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <MDIO_voidTogPinVal+0x70>
     f7a:	ba 01       	movw	r22, r20
     f7c:	62 27       	eor	r22, r18
     f7e:	62 bb       	out	0x12, r22	; 18
     f80:	08 95       	ret

00000f82 <MDIO_voidTogPort>:
		}
}

void MDIO_voidTogPort (u8 A_u8PortNo)
{
	switch (A_u8PortNo)
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	71 f0       	breq	.+28     	; 0xfa2 <MDIO_voidTogPort+0x20>
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	18 f4       	brcc	.+6      	; 0xf90 <MDIO_voidTogPort+0xe>
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	a9 f4       	brne	.+42     	; 0xfb8 <MDIO_voidTogPort+0x36>
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <MDIO_voidTogPort+0x18>
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	59 f0       	breq	.+22     	; 0xfaa <MDIO_voidTogPort+0x28>
     f94:	84 30       	cpi	r24, 0x04	; 4
     f96:	81 f4       	brne	.+32     	; 0xfb8 <MDIO_voidTogPort+0x36>
     f98:	0c c0       	rjmp	.+24     	; 0xfb2 <MDIO_voidTogPort+0x30>
		{
		case DIO_PORTA : PORTA = ~PORTA ; break ;
     f9a:	8b b3       	in	r24, 0x1b	; 27
     f9c:	80 95       	com	r24
     f9e:	8b bb       	out	0x1b, r24	; 27
     fa0:	08 95       	ret
		case DIO_PORTB : PORTB = ~PORTB ; break ;
     fa2:	88 b3       	in	r24, 0x18	; 24
     fa4:	80 95       	com	r24
     fa6:	88 bb       	out	0x18, r24	; 24
     fa8:	08 95       	ret
		case DIO_PORTC : PORTC = ~PORTC ; break ;
     faa:	85 b3       	in	r24, 0x15	; 21
     fac:	80 95       	com	r24
     fae:	85 bb       	out	0x15, r24	; 21
     fb0:	08 95       	ret
		case DIO_PORTD : PORTD = ~PORTD ; break ;
     fb2:	82 b3       	in	r24, 0x12	; 18
     fb4:	80 95       	com	r24
     fb6:	82 bb       	out	0x12, r24	; 18
     fb8:	08 95       	ret

00000fba <MDIO_voidWriteLowNibble>:
		}
}

void MDIO_voidWriteLowNibble (u8 A_u8PortNo , u8 A_u8PortVal)
{
	A_u8PortVal = A_u8PortVal & LOW_NIBBLE_OUTPUT ;
     fba:	6f 70       	andi	r22, 0x0F	; 15
	switch (A_u8PortNo)
     fbc:	82 30       	cpi	r24, 0x02	; 2
     fbe:	89 f0       	breq	.+34     	; 0xfe2 <MDIO_voidWriteLowNibble+0x28>
     fc0:	83 30       	cpi	r24, 0x03	; 3
     fc2:	18 f4       	brcc	.+6      	; 0xfca <MDIO_voidWriteLowNibble+0x10>
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	09 f5       	brne	.+66     	; 0x100a <MDIO_voidWriteLowNibble+0x50>
     fc8:	05 c0       	rjmp	.+10     	; 0xfd4 <MDIO_voidWriteLowNibble+0x1a>
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	89 f0       	breq	.+34     	; 0xff0 <MDIO_voidWriteLowNibble+0x36>
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	e1 f4       	brne	.+56     	; 0x100a <MDIO_voidWriteLowNibble+0x50>
     fd2:	15 c0       	rjmp	.+42     	; 0xffe <MDIO_voidWriteLowNibble+0x44>
		{
		case DIO_PORTA : PORTA = PORTA & HIGH_NIBBLE_OUTPUT ;
     fd4:	8b b3       	in	r24, 0x1b	; 27
     fd6:	80 7f       	andi	r24, 0xF0	; 240
     fd8:	8b bb       	out	0x1b, r24	; 27
						 PORTA = PORTA | A_u8PortVal        ;
     fda:	8b b3       	in	r24, 0x1b	; 27
     fdc:	68 2b       	or	r22, r24
     fde:	6b bb       	out	0x1b, r22	; 27
		                 break ;                        
     fe0:	08 95       	ret
		case DIO_PORTB : PORTB = PORTB & HIGH_NIBBLE_OUTPUT ;
     fe2:	88 b3       	in	r24, 0x18	; 24
     fe4:	80 7f       	andi	r24, 0xF0	; 240
     fe6:	88 bb       	out	0x18, r24	; 24
						 PORTB = PORTB | A_u8PortVal        ;		
     fe8:	88 b3       	in	r24, 0x18	; 24
     fea:	68 2b       	or	r22, r24
     fec:	68 bb       	out	0x18, r22	; 24
		                 break ;                        
     fee:	08 95       	ret
		case DIO_PORTC : PORTC = PORTC & HIGH_NIBBLE_OUTPUT ; 
     ff0:	85 b3       	in	r24, 0x15	; 21
     ff2:	80 7f       	andi	r24, 0xF0	; 240
     ff4:	85 bb       	out	0x15, r24	; 21
						 PORTC = PORTC | A_u8PortVal        ;		
     ff6:	85 b3       	in	r24, 0x15	; 21
     ff8:	68 2b       	or	r22, r24
     ffa:	65 bb       	out	0x15, r22	; 21
		                 break ;                        
     ffc:	08 95       	ret
		case DIO_PORTD : PORTD = PORTD & HIGH_NIBBLE_OUTPUT ;
     ffe:	82 b3       	in	r24, 0x12	; 18
    1000:	80 7f       	andi	r24, 0xF0	; 240
    1002:	82 bb       	out	0x12, r24	; 18
						 PORTD = PORTD | A_u8PortVal        ;		
    1004:	82 b3       	in	r24, 0x12	; 18
    1006:	68 2b       	or	r22, r24
    1008:	62 bb       	out	0x12, r22	; 18
    100a:	08 95       	ret

0000100c <MDIO_voidWriteHighNibble>:
		}
}

void MDIO_voidWriteHighNibble (u8 A_u8PortNo , u8 A_u8PortVal)
{
	A_u8PortVal = A_u8PortVal << FOUR_BITS ;
    100c:	62 95       	swap	r22
    100e:	60 7f       	andi	r22, 0xF0	; 240
	switch (A_u8PortNo)
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	89 f0       	breq	.+34     	; 0x1036 <MDIO_voidWriteHighNibble+0x2a>
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	18 f4       	brcc	.+6      	; 0x101e <MDIO_voidWriteHighNibble+0x12>
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	09 f5       	brne	.+66     	; 0x105e <MDIO_voidWriteHighNibble+0x52>
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <MDIO_voidWriteHighNibble+0x1c>
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	89 f0       	breq	.+34     	; 0x1044 <MDIO_voidWriteHighNibble+0x38>
    1022:	84 30       	cpi	r24, 0x04	; 4
    1024:	e1 f4       	brne	.+56     	; 0x105e <MDIO_voidWriteHighNibble+0x52>
    1026:	15 c0       	rjmp	.+42     	; 0x1052 <MDIO_voidWriteHighNibble+0x46>
		{
		case DIO_PORTA : PORTA = PORTA & LOW_NIBBLE_OUTPUT ; 
    1028:	8b b3       	in	r24, 0x1b	; 27
    102a:	8f 70       	andi	r24, 0x0F	; 15
    102c:	8b bb       	out	0x1b, r24	; 27
						 PORTA = PORTA | A_u8PortVal       ;
    102e:	8b b3       	in	r24, 0x1b	; 27
    1030:	68 2b       	or	r22, r24
    1032:	6b bb       	out	0x1b, r22	; 27
		                 break ;                      
    1034:	08 95       	ret
		case DIO_PORTB : PORTB = PORTB & LOW_NIBBLE_OUTPUT ; 
    1036:	88 b3       	in	r24, 0x18	; 24
    1038:	8f 70       	andi	r24, 0x0F	; 15
    103a:	88 bb       	out	0x18, r24	; 24
						 PORTB = PORTB | A_u8PortVal       ;
    103c:	88 b3       	in	r24, 0x18	; 24
    103e:	68 2b       	or	r22, r24
    1040:	68 bb       	out	0x18, r22	; 24
		                 break ;               
    1042:	08 95       	ret
		case DIO_PORTC : PORTC = PORTC & LOW_NIBBLE_OUTPUT ; 
    1044:	85 b3       	in	r24, 0x15	; 21
    1046:	8f 70       	andi	r24, 0x0F	; 15
    1048:	85 bb       	out	0x15, r24	; 21
						 PORTC = PORTC | A_u8PortVal       ;
    104a:	85 b3       	in	r24, 0x15	; 21
    104c:	68 2b       	or	r22, r24
    104e:	65 bb       	out	0x15, r22	; 21
		                 break ;                        
    1050:	08 95       	ret
		case DIO_PORTD : PORTD = PORTD & LOW_NIBBLE_OUTPUT ;
    1052:	82 b3       	in	r24, 0x12	; 18
    1054:	8f 70       	andi	r24, 0x0F	; 15
    1056:	82 bb       	out	0x12, r24	; 18
						 PORTD = PORTD | A_u8PortVal       ;
    1058:	82 b3       	in	r24, 0x12	; 18
    105a:	68 2b       	or	r22, r24
    105c:	62 bb       	out	0x12, r22	; 18
    105e:	08 95       	ret

00001060 <MDIO_voidConnectPullup>:
		}
}

void MDIO_voidConnectPullup(u8 A_u8PortNo ,u8 A_u8PinNo, u8 A_u8ConnectPullup)
{
	switch (A_u8ConnectPullup)
    1060:	41 30       	cpi	r20, 0x01	; 1
    1062:	19 f0       	breq	.+6      	; 0x106a <MDIO_voidConnectPullup+0xa>
    1064:	42 30       	cpi	r20, 0x02	; 2
    1066:	31 f4       	brne	.+12     	; 0x1074 <MDIO_voidConnectPullup+0x14>
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <MDIO_voidConnectPullup+0x10>
	{
	case ENABLE_PULLUP  : MDIO_voidSetPinVal (A_u8PortNo , A_u8PinNo) ;break ;
    106a:	0e 94 50 06 	call	0xca0	; 0xca0 <MDIO_voidSetPinVal>
    106e:	08 95       	ret
	case DISABLE_PULLUP : MDIO_voidClrPinVal (A_u8PortNo , A_u8PinNo) ;break ;
    1070:	0e 94 28 07 	call	0xe50	; 0xe50 <MDIO_voidClrPinVal>
    1074:	08 95       	ret

00001076 <MTimer_voidInt>:

void MTimer_voidInt (void)
{
	
	/** Enable global interrupt flag */
	    SET_BIT(SREG, I_BIT);
    1076:	8f b7       	in	r24, 0x3f	; 63
    1078:	80 68       	ori	r24, 0x80	; 128
    107a:	8f bf       	out	0x3f, r24	; 63
	    #if   TIMER0_PRESCALER == CLK_PS_1          /**clk = 8MHZ    */	
		    SET_BIT(TCCR0 , CS00) ;
	        CLR_BIT(TCCR0 , CS01) ;
	        CLR_BIT(TCCR0 , CS02) ;
	    #elif TIMER0_PRESCALER == CLK_PS_8          /**clk = 1MHZ    */	
			CLR_BIT(TCCR0 , CS00) ;
    107c:	83 b7       	in	r24, 0x33	; 51
    107e:	8e 7f       	andi	r24, 0xFE	; 254
    1080:	83 bf       	out	0x33, r24	; 51
	        SET_BIT(TCCR0 , CS01) ;
    1082:	83 b7       	in	r24, 0x33	; 51
    1084:	82 60       	ori	r24, 0x02	; 2
    1086:	83 bf       	out	0x33, r24	; 51
	        CLR_BIT(TCCR0 , CS02) ;
    1088:	83 b7       	in	r24, 0x33	; 51
    108a:	8b 7f       	andi	r24, 0xFB	; 251
    108c:	83 bf       	out	0x33, r24	; 51
			#error "select correct options of TIMER0_PRESCALER"
		#endif
	
		/**Timer/counter0 mode*/
		#if   TIMER0_MODE == NORMAL_MODE
		    CLR_BIT(TCCR0 , WGM00) ;/*Normal mode (over flow mode)*/
    108e:	83 b7       	in	r24, 0x33	; 51
    1090:	8f 7b       	andi	r24, 0xBF	; 191
    1092:	83 bf       	out	0x33, r24	; 51
		    CLR_BIT(TCCR0 , WGM01) ;
    1094:	83 b7       	in	r24, 0x33	; 51
    1096:	87 7f       	andi	r24, 0xF7	; 247
    1098:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TIMSK , TOIE0);/*Enable interrupt of over flow mode*/
    109a:	89 b7       	in	r24, 0x39	; 57
    109c:	81 60       	ori	r24, 0x01	; 1
    109e:	89 bf       	out	0x39, r24	; 57
	    CLR_BIT(TCCR2 , CS21) ;
	    CLR_BIT(TCCR2 , CS22) ;
	#else 
		#error "TIMER1 must be ENABLE1 or DISABLE1"
	#endif
}
    10a0:	08 95       	ret

000010a2 <MTimer_voidSetDisiredTime>:

void MTimer_voidSetDisiredTime (u8 A_u8TimerID , f32 A_f32DisiredTime , void (*A_fptr)(void) )
{
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	6a 01       	movw	r12, r20
    10b8:	7b 01       	movw	r14, r22
    10ba:	59 01       	movw	r10, r18
	            u16  L_u16NumberOfTimerCount = 256 ;
	            u16  L_u16PreloadValue       = 0 ;
				
	            L_f32OverFlowTime  = L_f32OverFlowTime * TIMER0_PRESCALER ;
                L_f32OverFlowTime  = L_f32OverFlowTime / CLOK_SYSTEM ;
				L_f32OverFlowCount = A_f32DisiredTime / L_f32OverFlowTime ;
    10bc:	cb 01       	movw	r24, r22
    10be:	ba 01       	movw	r22, r20
    10c0:	2d eb       	ldi	r18, 0xBD	; 189
    10c2:	37 e3       	ldi	r19, 0x37	; 55
    10c4:	46 e8       	ldi	r20, 0x86	; 134
    10c6:	59 e3       	ldi	r21, 0x39	; 57
    10c8:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
    10cc:	c6 2f       	mov	r28, r22
    10ce:	d7 2f       	mov	r29, r23
    10d0:	18 2f       	mov	r17, r24
    10d2:	09 2f       	mov	r16, r25
				Timer0_Overflow_CallBack = A_fptr ;
    10d4:	b0 92 e0 00 	sts	0x00E0, r11
    10d8:	a0 92 df 00 	sts	0x00DF, r10
				if (L_f32OverFlowCount < 1.0)
    10dc:	86 2f       	mov	r24, r22
    10de:	9d 2f       	mov	r25, r29
    10e0:	a1 2f       	mov	r26, r17
    10e2:	b0 2f       	mov	r27, r16
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5f e3       	ldi	r21, 0x3F	; 63
    10f0:	0e 94 9e 09 	call	0x133c	; 0x133c <__cmpsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	74 f5       	brge	.+92     	; 0x1154 <MTimer_voidSetDisiredTime+0xb2>
				{
					L_u16NumberOfTimerCount = L_u16NumberOfTimerCount * A_f32DisiredTime ;
    10f8:	c7 01       	movw	r24, r14
    10fa:	b6 01       	movw	r22, r12
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e8       	ldi	r20, 0x80	; 128
    1102:	53 e4       	ldi	r21, 0x43	; 67
    1104:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__mulsf3>
    1108:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fixunssfsi>
					L_u16NumberOfTimerCount = L_u16NumberOfTimerCount / L_f32OverFlowTime ;
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 36 0a 	call	0x146c	; 0x146c <__floatunsisf>
    1114:	2d eb       	ldi	r18, 0xBD	; 189
    1116:	37 e3       	ldi	r19, 0x37	; 55
    1118:	46 e8       	ldi	r20, 0x86	; 134
    111a:	59 e3       	ldi	r21, 0x39	; 57
    111c:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
    1120:	46 2f       	mov	r20, r22
    1122:	57 2f       	mov	r21, r23
    1124:	68 2f       	mov	r22, r24
    1126:	79 2f       	mov	r23, r25
    1128:	cb 01       	movw	r24, r22
    112a:	ba 01       	movw	r22, r20
    112c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fixunssfsi>
					L_u16PreloadValue       = 256 - L_u16NumberOfTimerCount ;
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	86 1b       	sub	r24, r22
    1136:	97 0b       	sbc	r25, r23
					TCNT0 = L_u16PreloadValue ;
    1138:	82 bf       	out	0x32, r24	; 50
					G_u32IntervalCount = 1 ;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a0 e0       	ldi	r26, 0x00	; 0
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	80 93 d5 00 	sts	0x00D5, r24
    1146:	90 93 d6 00 	sts	0x00D6, r25
    114a:	a0 93 d7 00 	sts	0x00D7, r26
    114e:	b0 93 d8 00 	sts	0x00D8, r27
    1152:	32 c0       	rjmp	.+100    	; 0x11b8 <MTimer_voidSetDisiredTime+0x116>
				}
				else
				{
					G_u32IntervalCount = (u32)L_f32OverFlowCount ;
    1154:	8c 2f       	mov	r24, r28
    1156:	9d 2f       	mov	r25, r29
    1158:	a1 2f       	mov	r26, r17
    115a:	b0 2f       	mov	r27, r16
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fixunssfsi>
    1164:	6b 01       	movw	r12, r22
    1166:	7c 01       	movw	r14, r24
    1168:	60 93 d5 00 	sts	0x00D5, r22
    116c:	70 93 d6 00 	sts	0x00D6, r23
    1170:	80 93 d7 00 	sts	0x00D7, r24
    1174:	90 93 d8 00 	sts	0x00D8, r25
					if (L_f32OverFlowCount - (u32)L_f32OverFlowCount != 0.0)
    1178:	0e 94 36 0a 	call	0x146c	; 0x146c <__floatunsisf>
    117c:	9b 01       	movw	r18, r22
    117e:	ac 01       	movw	r20, r24
    1180:	8c 2f       	mov	r24, r28
    1182:	9d 2f       	mov	r25, r29
    1184:	a1 2f       	mov	r26, r17
    1186:	b0 2f       	mov	r27, r16
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 39 09 	call	0x1272	; 0x1272 <__subsf3>
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	a9 01       	movw	r20, r18
    1196:	0e 94 9e 09 	call	0x133c	; 0x133c <__cmpsf2>
    119a:	88 23       	and	r24, r24
    119c:	69 f0       	breq	.+26     	; 0x11b8 <MTimer_voidSetDisiredTime+0x116>
					{
						G_u32IntervalCount ++ ;
    119e:	08 94       	sec
    11a0:	c1 1c       	adc	r12, r1
    11a2:	d1 1c       	adc	r13, r1
    11a4:	e1 1c       	adc	r14, r1
    11a6:	f1 1c       	adc	r15, r1
    11a8:	c0 92 d5 00 	sts	0x00D5, r12
    11ac:	d0 92 d6 00 	sts	0x00D6, r13
    11b0:	e0 92 d7 00 	sts	0x00D7, r14
    11b4:	f0 92 d8 00 	sts	0x00D8, r15
				#error "in MTimer_voidSetDisiredTime function: TIMER0_MODE must be NORMAL_MODE or COMPARE_MATCH_MODE"
	        #endif
	//}
	
	
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	af 90       	pop	r10
    11cc:	08 95       	ret

000011ce <__vector_11>:

/*ISR of Timer0 over flow*/
void __vector_11(void)__attribute__((signal))__attribute__((interrupt));
void __vector_11(void)
{
    11ce:	78 94       	sei
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    11f2:	80 91 d9 00 	lds	r24, 0x00D9
    11f6:	90 91 da 00 	lds	r25, 0x00DA
    11fa:	a0 91 db 00 	lds	r26, 0x00DB
    11fe:	b0 91 dc 00 	lds	r27, 0x00DC
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	a1 1d       	adc	r26, r1
    1206:	b1 1d       	adc	r27, r1
    1208:	80 93 d9 00 	sts	0x00D9, r24
    120c:	90 93 da 00 	sts	0x00DA, r25
    1210:	a0 93 db 00 	sts	0x00DB, r26
    1214:	b0 93 dc 00 	sts	0x00DC, r27

	if(LS_u32Counter == G_u32IntervalCount)
    1218:	40 91 d5 00 	lds	r20, 0x00D5
    121c:	50 91 d6 00 	lds	r21, 0x00D6
    1220:	60 91 d7 00 	lds	r22, 0x00D7
    1224:	70 91 d8 00 	lds	r23, 0x00D8
    1228:	84 17       	cp	r24, r20
    122a:	95 07       	cpc	r25, r21
    122c:	a6 07       	cpc	r26, r22
    122e:	b7 07       	cpc	r27, r23
    1230:	79 f4       	brne	.+30     	; 0x1250 <__vector_11+0x82>
	{
		if(Timer0_Overflow_CallBack != NULL)
    1232:	e0 91 df 00 	lds	r30, 0x00DF
    1236:	f0 91 e0 00 	lds	r31, 0x00E0
    123a:	30 97       	sbiw	r30, 0x00	; 0
    123c:	49 f0       	breq	.+18     	; 0x1250 <__vector_11+0x82>
		{
			Timer0_Overflow_CallBack();
    123e:	09 95       	icall
			LS_u32Counter = 0;
    1240:	10 92 d9 00 	sts	0x00D9, r1
    1244:	10 92 da 00 	sts	0x00DA, r1
    1248:	10 92 db 00 	sts	0x00DB, r1
    124c:	10 92 dc 00 	sts	0x00DC, r1
		}
	}
    1250:	ff 91       	pop	r31
    1252:	ef 91       	pop	r30
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <__subsf3>:
    1272:	50 58       	subi	r21, 0x80	; 128

00001274 <__addsf3>:
    1274:	bb 27       	eor	r27, r27
    1276:	aa 27       	eor	r26, r26
    1278:	0e d0       	rcall	.+28     	; 0x1296 <__addsf3x>
    127a:	70 c1       	rjmp	.+736    	; 0x155c <__fp_round>
    127c:	61 d1       	rcall	.+706    	; 0x1540 <__fp_pscA>
    127e:	30 f0       	brcs	.+12     	; 0x128c <__addsf3+0x18>
    1280:	66 d1       	rcall	.+716    	; 0x154e <__fp_pscB>
    1282:	20 f0       	brcs	.+8      	; 0x128c <__addsf3+0x18>
    1284:	31 f4       	brne	.+12     	; 0x1292 <__addsf3+0x1e>
    1286:	9f 3f       	cpi	r25, 0xFF	; 255
    1288:	11 f4       	brne	.+4      	; 0x128e <__addsf3+0x1a>
    128a:	1e f4       	brtc	.+6      	; 0x1292 <__addsf3+0x1e>
    128c:	56 c1       	rjmp	.+684    	; 0x153a <__fp_nan>
    128e:	0e f4       	brtc	.+2      	; 0x1292 <__addsf3+0x1e>
    1290:	e0 95       	com	r30
    1292:	e7 fb       	bst	r30, 7
    1294:	4c c1       	rjmp	.+664    	; 0x152e <__fp_inf>

00001296 <__addsf3x>:
    1296:	e9 2f       	mov	r30, r25
    1298:	72 d1       	rcall	.+740    	; 0x157e <__fp_split3>
    129a:	80 f3       	brcs	.-32     	; 0x127c <__addsf3+0x8>
    129c:	ba 17       	cp	r27, r26
    129e:	62 07       	cpc	r22, r18
    12a0:	73 07       	cpc	r23, r19
    12a2:	84 07       	cpc	r24, r20
    12a4:	95 07       	cpc	r25, r21
    12a6:	18 f0       	brcs	.+6      	; 0x12ae <__addsf3x+0x18>
    12a8:	71 f4       	brne	.+28     	; 0x12c6 <__addsf3x+0x30>
    12aa:	9e f5       	brtc	.+102    	; 0x1312 <__addsf3x+0x7c>
    12ac:	8a c1       	rjmp	.+788    	; 0x15c2 <__fp_zero>
    12ae:	0e f4       	brtc	.+2      	; 0x12b2 <__addsf3x+0x1c>
    12b0:	e0 95       	com	r30
    12b2:	0b 2e       	mov	r0, r27
    12b4:	ba 2f       	mov	r27, r26
    12b6:	a0 2d       	mov	r26, r0
    12b8:	0b 01       	movw	r0, r22
    12ba:	b9 01       	movw	r22, r18
    12bc:	90 01       	movw	r18, r0
    12be:	0c 01       	movw	r0, r24
    12c0:	ca 01       	movw	r24, r20
    12c2:	a0 01       	movw	r20, r0
    12c4:	11 24       	eor	r1, r1
    12c6:	ff 27       	eor	r31, r31
    12c8:	59 1b       	sub	r21, r25
    12ca:	99 f0       	breq	.+38     	; 0x12f2 <__addsf3x+0x5c>
    12cc:	59 3f       	cpi	r21, 0xF9	; 249
    12ce:	50 f4       	brcc	.+20     	; 0x12e4 <__addsf3x+0x4e>
    12d0:	50 3e       	cpi	r21, 0xE0	; 224
    12d2:	68 f1       	brcs	.+90     	; 0x132e <__addsf3x+0x98>
    12d4:	1a 16       	cp	r1, r26
    12d6:	f0 40       	sbci	r31, 0x00	; 0
    12d8:	a2 2f       	mov	r26, r18
    12da:	23 2f       	mov	r18, r19
    12dc:	34 2f       	mov	r19, r20
    12de:	44 27       	eor	r20, r20
    12e0:	58 5f       	subi	r21, 0xF8	; 248
    12e2:	f3 cf       	rjmp	.-26     	; 0x12ca <__addsf3x+0x34>
    12e4:	46 95       	lsr	r20
    12e6:	37 95       	ror	r19
    12e8:	27 95       	ror	r18
    12ea:	a7 95       	ror	r26
    12ec:	f0 40       	sbci	r31, 0x00	; 0
    12ee:	53 95       	inc	r21
    12f0:	c9 f7       	brne	.-14     	; 0x12e4 <__addsf3x+0x4e>
    12f2:	7e f4       	brtc	.+30     	; 0x1312 <__addsf3x+0x7c>
    12f4:	1f 16       	cp	r1, r31
    12f6:	ba 0b       	sbc	r27, r26
    12f8:	62 0b       	sbc	r22, r18
    12fa:	73 0b       	sbc	r23, r19
    12fc:	84 0b       	sbc	r24, r20
    12fe:	ba f0       	brmi	.+46     	; 0x132e <__addsf3x+0x98>
    1300:	91 50       	subi	r25, 0x01	; 1
    1302:	a1 f0       	breq	.+40     	; 0x132c <__addsf3x+0x96>
    1304:	ff 0f       	add	r31, r31
    1306:	bb 1f       	adc	r27, r27
    1308:	66 1f       	adc	r22, r22
    130a:	77 1f       	adc	r23, r23
    130c:	88 1f       	adc	r24, r24
    130e:	c2 f7       	brpl	.-16     	; 0x1300 <__addsf3x+0x6a>
    1310:	0e c0       	rjmp	.+28     	; 0x132e <__addsf3x+0x98>
    1312:	ba 0f       	add	r27, r26
    1314:	62 1f       	adc	r22, r18
    1316:	73 1f       	adc	r23, r19
    1318:	84 1f       	adc	r24, r20
    131a:	48 f4       	brcc	.+18     	; 0x132e <__addsf3x+0x98>
    131c:	87 95       	ror	r24
    131e:	77 95       	ror	r23
    1320:	67 95       	ror	r22
    1322:	b7 95       	ror	r27
    1324:	f7 95       	ror	r31
    1326:	9e 3f       	cpi	r25, 0xFE	; 254
    1328:	08 f0       	brcs	.+2      	; 0x132c <__addsf3x+0x96>
    132a:	b3 cf       	rjmp	.-154    	; 0x1292 <__addsf3+0x1e>
    132c:	93 95       	inc	r25
    132e:	88 0f       	add	r24, r24
    1330:	08 f0       	brcs	.+2      	; 0x1334 <__addsf3x+0x9e>
    1332:	99 27       	eor	r25, r25
    1334:	ee 0f       	add	r30, r30
    1336:	97 95       	ror	r25
    1338:	87 95       	ror	r24
    133a:	08 95       	ret

0000133c <__cmpsf2>:
    133c:	d4 d0       	rcall	.+424    	; 0x14e6 <__fp_cmp>
    133e:	08 f4       	brcc	.+2      	; 0x1342 <__cmpsf2+0x6>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	08 95       	ret

00001344 <__divsf3>:
    1344:	0c d0       	rcall	.+24     	; 0x135e <__divsf3x>
    1346:	0a c1       	rjmp	.+532    	; 0x155c <__fp_round>
    1348:	02 d1       	rcall	.+516    	; 0x154e <__fp_pscB>
    134a:	40 f0       	brcs	.+16     	; 0x135c <__divsf3+0x18>
    134c:	f9 d0       	rcall	.+498    	; 0x1540 <__fp_pscA>
    134e:	30 f0       	brcs	.+12     	; 0x135c <__divsf3+0x18>
    1350:	21 f4       	brne	.+8      	; 0x135a <__divsf3+0x16>
    1352:	5f 3f       	cpi	r21, 0xFF	; 255
    1354:	19 f0       	breq	.+6      	; 0x135c <__divsf3+0x18>
    1356:	eb c0       	rjmp	.+470    	; 0x152e <__fp_inf>
    1358:	51 11       	cpse	r21, r1
    135a:	34 c1       	rjmp	.+616    	; 0x15c4 <__fp_szero>
    135c:	ee c0       	rjmp	.+476    	; 0x153a <__fp_nan>

0000135e <__divsf3x>:
    135e:	0f d1       	rcall	.+542    	; 0x157e <__fp_split3>
    1360:	98 f3       	brcs	.-26     	; 0x1348 <__divsf3+0x4>

00001362 <__divsf3_pse>:
    1362:	99 23       	and	r25, r25
    1364:	c9 f3       	breq	.-14     	; 0x1358 <__divsf3+0x14>
    1366:	55 23       	and	r21, r21
    1368:	b1 f3       	breq	.-20     	; 0x1356 <__divsf3+0x12>
    136a:	95 1b       	sub	r25, r21
    136c:	55 0b       	sbc	r21, r21
    136e:	bb 27       	eor	r27, r27
    1370:	aa 27       	eor	r26, r26
    1372:	62 17       	cp	r22, r18
    1374:	73 07       	cpc	r23, r19
    1376:	84 07       	cpc	r24, r20
    1378:	38 f0       	brcs	.+14     	; 0x1388 <__divsf3_pse+0x26>
    137a:	9f 5f       	subi	r25, 0xFF	; 255
    137c:	5f 4f       	sbci	r21, 0xFF	; 255
    137e:	22 0f       	add	r18, r18
    1380:	33 1f       	adc	r19, r19
    1382:	44 1f       	adc	r20, r20
    1384:	aa 1f       	adc	r26, r26
    1386:	a9 f3       	breq	.-22     	; 0x1372 <__divsf3_pse+0x10>
    1388:	33 d0       	rcall	.+102    	; 0x13f0 <__divsf3_pse+0x8e>
    138a:	0e 2e       	mov	r0, r30
    138c:	3a f0       	brmi	.+14     	; 0x139c <__divsf3_pse+0x3a>
    138e:	e0 e8       	ldi	r30, 0x80	; 128
    1390:	30 d0       	rcall	.+96     	; 0x13f2 <__divsf3_pse+0x90>
    1392:	91 50       	subi	r25, 0x01	; 1
    1394:	50 40       	sbci	r21, 0x00	; 0
    1396:	e6 95       	lsr	r30
    1398:	00 1c       	adc	r0, r0
    139a:	ca f7       	brpl	.-14     	; 0x138e <__divsf3_pse+0x2c>
    139c:	29 d0       	rcall	.+82     	; 0x13f0 <__divsf3_pse+0x8e>
    139e:	fe 2f       	mov	r31, r30
    13a0:	27 d0       	rcall	.+78     	; 0x13f0 <__divsf3_pse+0x8e>
    13a2:	66 0f       	add	r22, r22
    13a4:	77 1f       	adc	r23, r23
    13a6:	88 1f       	adc	r24, r24
    13a8:	bb 1f       	adc	r27, r27
    13aa:	26 17       	cp	r18, r22
    13ac:	37 07       	cpc	r19, r23
    13ae:	48 07       	cpc	r20, r24
    13b0:	ab 07       	cpc	r26, r27
    13b2:	b0 e8       	ldi	r27, 0x80	; 128
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <__divsf3_pse+0x56>
    13b6:	bb 0b       	sbc	r27, r27
    13b8:	80 2d       	mov	r24, r0
    13ba:	bf 01       	movw	r22, r30
    13bc:	ff 27       	eor	r31, r31
    13be:	93 58       	subi	r25, 0x83	; 131
    13c0:	5f 4f       	sbci	r21, 0xFF	; 255
    13c2:	2a f0       	brmi	.+10     	; 0x13ce <__divsf3_pse+0x6c>
    13c4:	9e 3f       	cpi	r25, 0xFE	; 254
    13c6:	51 05       	cpc	r21, r1
    13c8:	68 f0       	brcs	.+26     	; 0x13e4 <__divsf3_pse+0x82>
    13ca:	b1 c0       	rjmp	.+354    	; 0x152e <__fp_inf>
    13cc:	fb c0       	rjmp	.+502    	; 0x15c4 <__fp_szero>
    13ce:	5f 3f       	cpi	r21, 0xFF	; 255
    13d0:	ec f3       	brlt	.-6      	; 0x13cc <__divsf3_pse+0x6a>
    13d2:	98 3e       	cpi	r25, 0xE8	; 232
    13d4:	dc f3       	brlt	.-10     	; 0x13cc <__divsf3_pse+0x6a>
    13d6:	86 95       	lsr	r24
    13d8:	77 95       	ror	r23
    13da:	67 95       	ror	r22
    13dc:	b7 95       	ror	r27
    13de:	f7 95       	ror	r31
    13e0:	9f 5f       	subi	r25, 0xFF	; 255
    13e2:	c9 f7       	brne	.-14     	; 0x13d6 <__divsf3_pse+0x74>
    13e4:	88 0f       	add	r24, r24
    13e6:	91 1d       	adc	r25, r1
    13e8:	96 95       	lsr	r25
    13ea:	87 95       	ror	r24
    13ec:	97 f9       	bld	r25, 7
    13ee:	08 95       	ret
    13f0:	e1 e0       	ldi	r30, 0x01	; 1
    13f2:	66 0f       	add	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	bb 1f       	adc	r27, r27
    13fa:	62 17       	cp	r22, r18
    13fc:	73 07       	cpc	r23, r19
    13fe:	84 07       	cpc	r24, r20
    1400:	ba 07       	cpc	r27, r26
    1402:	20 f0       	brcs	.+8      	; 0x140c <__divsf3_pse+0xaa>
    1404:	62 1b       	sub	r22, r18
    1406:	73 0b       	sbc	r23, r19
    1408:	84 0b       	sbc	r24, r20
    140a:	ba 0b       	sbc	r27, r26
    140c:	ee 1f       	adc	r30, r30
    140e:	88 f7       	brcc	.-30     	; 0x13f2 <__divsf3_pse+0x90>
    1410:	e0 95       	com	r30
    1412:	08 95       	ret

00001414 <__fixunssfsi>:
    1414:	bc d0       	rcall	.+376    	; 0x158e <__fp_splitA>
    1416:	88 f0       	brcs	.+34     	; 0x143a <__fixunssfsi+0x26>
    1418:	9f 57       	subi	r25, 0x7F	; 127
    141a:	90 f0       	brcs	.+36     	; 0x1440 <__fixunssfsi+0x2c>
    141c:	b9 2f       	mov	r27, r25
    141e:	99 27       	eor	r25, r25
    1420:	b7 51       	subi	r27, 0x17	; 23
    1422:	a0 f0       	brcs	.+40     	; 0x144c <__fixunssfsi+0x38>
    1424:	d1 f0       	breq	.+52     	; 0x145a <__fixunssfsi+0x46>
    1426:	66 0f       	add	r22, r22
    1428:	77 1f       	adc	r23, r23
    142a:	88 1f       	adc	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	1a f0       	brmi	.+6      	; 0x1436 <__fixunssfsi+0x22>
    1430:	ba 95       	dec	r27
    1432:	c9 f7       	brne	.-14     	; 0x1426 <__fixunssfsi+0x12>
    1434:	12 c0       	rjmp	.+36     	; 0x145a <__fixunssfsi+0x46>
    1436:	b1 30       	cpi	r27, 0x01	; 1
    1438:	81 f0       	breq	.+32     	; 0x145a <__fixunssfsi+0x46>
    143a:	c3 d0       	rcall	.+390    	; 0x15c2 <__fp_zero>
    143c:	b1 e0       	ldi	r27, 0x01	; 1
    143e:	08 95       	ret
    1440:	c0 c0       	rjmp	.+384    	; 0x15c2 <__fp_zero>
    1442:	67 2f       	mov	r22, r23
    1444:	78 2f       	mov	r23, r24
    1446:	88 27       	eor	r24, r24
    1448:	b8 5f       	subi	r27, 0xF8	; 248
    144a:	39 f0       	breq	.+14     	; 0x145a <__fixunssfsi+0x46>
    144c:	b9 3f       	cpi	r27, 0xF9	; 249
    144e:	cc f3       	brlt	.-14     	; 0x1442 <__fixunssfsi+0x2e>
    1450:	86 95       	lsr	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	b3 95       	inc	r27
    1458:	d9 f7       	brne	.-10     	; 0x1450 <__fixunssfsi+0x3c>
    145a:	3e f4       	brtc	.+14     	; 0x146a <__fixunssfsi+0x56>
    145c:	90 95       	com	r25
    145e:	80 95       	com	r24
    1460:	70 95       	com	r23
    1462:	61 95       	neg	r22
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	8f 4f       	sbci	r24, 0xFF	; 255
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	08 95       	ret

0000146c <__floatunsisf>:
    146c:	e8 94       	clt
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <__floatsisf+0x12>

00001470 <__floatsisf>:
    1470:	97 fb       	bst	r25, 7
    1472:	3e f4       	brtc	.+14     	; 0x1482 <__floatsisf+0x12>
    1474:	90 95       	com	r25
    1476:	80 95       	com	r24
    1478:	70 95       	com	r23
    147a:	61 95       	neg	r22
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	8f 4f       	sbci	r24, 0xFF	; 255
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	99 23       	and	r25, r25
    1484:	a9 f0       	breq	.+42     	; 0x14b0 <__floatsisf+0x40>
    1486:	f9 2f       	mov	r31, r25
    1488:	96 e9       	ldi	r25, 0x96	; 150
    148a:	bb 27       	eor	r27, r27
    148c:	93 95       	inc	r25
    148e:	f6 95       	lsr	r31
    1490:	87 95       	ror	r24
    1492:	77 95       	ror	r23
    1494:	67 95       	ror	r22
    1496:	b7 95       	ror	r27
    1498:	f1 11       	cpse	r31, r1
    149a:	f8 cf       	rjmp	.-16     	; 0x148c <__floatsisf+0x1c>
    149c:	fa f4       	brpl	.+62     	; 0x14dc <__floatsisf+0x6c>
    149e:	bb 0f       	add	r27, r27
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <__floatsisf+0x36>
    14a2:	60 ff       	sbrs	r22, 0
    14a4:	1b c0       	rjmp	.+54     	; 0x14dc <__floatsisf+0x6c>
    14a6:	6f 5f       	subi	r22, 0xFF	; 255
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	8f 4f       	sbci	r24, 0xFF	; 255
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	16 c0       	rjmp	.+44     	; 0x14dc <__floatsisf+0x6c>
    14b0:	88 23       	and	r24, r24
    14b2:	11 f0       	breq	.+4      	; 0x14b8 <__floatsisf+0x48>
    14b4:	96 e9       	ldi	r25, 0x96	; 150
    14b6:	11 c0       	rjmp	.+34     	; 0x14da <__floatsisf+0x6a>
    14b8:	77 23       	and	r23, r23
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <__floatsisf+0x54>
    14bc:	9e e8       	ldi	r25, 0x8E	; 142
    14be:	87 2f       	mov	r24, r23
    14c0:	76 2f       	mov	r23, r22
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <__floatsisf+0x5e>
    14c4:	66 23       	and	r22, r22
    14c6:	71 f0       	breq	.+28     	; 0x14e4 <__floatsisf+0x74>
    14c8:	96 e8       	ldi	r25, 0x86	; 134
    14ca:	86 2f       	mov	r24, r22
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	2a f0       	brmi	.+10     	; 0x14dc <__floatsisf+0x6c>
    14d2:	9a 95       	dec	r25
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	88 1f       	adc	r24, r24
    14da:	da f7       	brpl	.-10     	; 0x14d2 <__floatsisf+0x62>
    14dc:	88 0f       	add	r24, r24
    14de:	96 95       	lsr	r25
    14e0:	87 95       	ror	r24
    14e2:	97 f9       	bld	r25, 7
    14e4:	08 95       	ret

000014e6 <__fp_cmp>:
    14e6:	99 0f       	add	r25, r25
    14e8:	00 08       	sbc	r0, r0
    14ea:	55 0f       	add	r21, r21
    14ec:	aa 0b       	sbc	r26, r26
    14ee:	e0 e8       	ldi	r30, 0x80	; 128
    14f0:	fe ef       	ldi	r31, 0xFE	; 254
    14f2:	16 16       	cp	r1, r22
    14f4:	17 06       	cpc	r1, r23
    14f6:	e8 07       	cpc	r30, r24
    14f8:	f9 07       	cpc	r31, r25
    14fa:	c0 f0       	brcs	.+48     	; 0x152c <__fp_cmp+0x46>
    14fc:	12 16       	cp	r1, r18
    14fe:	13 06       	cpc	r1, r19
    1500:	e4 07       	cpc	r30, r20
    1502:	f5 07       	cpc	r31, r21
    1504:	98 f0       	brcs	.+38     	; 0x152c <__fp_cmp+0x46>
    1506:	62 1b       	sub	r22, r18
    1508:	73 0b       	sbc	r23, r19
    150a:	84 0b       	sbc	r24, r20
    150c:	95 0b       	sbc	r25, r21
    150e:	39 f4       	brne	.+14     	; 0x151e <__fp_cmp+0x38>
    1510:	0a 26       	eor	r0, r26
    1512:	61 f0       	breq	.+24     	; 0x152c <__fp_cmp+0x46>
    1514:	23 2b       	or	r18, r19
    1516:	24 2b       	or	r18, r20
    1518:	25 2b       	or	r18, r21
    151a:	21 f4       	brne	.+8      	; 0x1524 <__fp_cmp+0x3e>
    151c:	08 95       	ret
    151e:	0a 26       	eor	r0, r26
    1520:	09 f4       	brne	.+2      	; 0x1524 <__fp_cmp+0x3e>
    1522:	a1 40       	sbci	r26, 0x01	; 1
    1524:	a6 95       	lsr	r26
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	81 1d       	adc	r24, r1
    152a:	81 1d       	adc	r24, r1
    152c:	08 95       	ret

0000152e <__fp_inf>:
    152e:	97 f9       	bld	r25, 7
    1530:	9f 67       	ori	r25, 0x7F	; 127
    1532:	80 e8       	ldi	r24, 0x80	; 128
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	08 95       	ret

0000153a <__fp_nan>:
    153a:	9f ef       	ldi	r25, 0xFF	; 255
    153c:	80 ec       	ldi	r24, 0xC0	; 192
    153e:	08 95       	ret

00001540 <__fp_pscA>:
    1540:	00 24       	eor	r0, r0
    1542:	0a 94       	dec	r0
    1544:	16 16       	cp	r1, r22
    1546:	17 06       	cpc	r1, r23
    1548:	18 06       	cpc	r1, r24
    154a:	09 06       	cpc	r0, r25
    154c:	08 95       	ret

0000154e <__fp_pscB>:
    154e:	00 24       	eor	r0, r0
    1550:	0a 94       	dec	r0
    1552:	12 16       	cp	r1, r18
    1554:	13 06       	cpc	r1, r19
    1556:	14 06       	cpc	r1, r20
    1558:	05 06       	cpc	r0, r21
    155a:	08 95       	ret

0000155c <__fp_round>:
    155c:	09 2e       	mov	r0, r25
    155e:	03 94       	inc	r0
    1560:	00 0c       	add	r0, r0
    1562:	11 f4       	brne	.+4      	; 0x1568 <__fp_round+0xc>
    1564:	88 23       	and	r24, r24
    1566:	52 f0       	brmi	.+20     	; 0x157c <__fp_round+0x20>
    1568:	bb 0f       	add	r27, r27
    156a:	40 f4       	brcc	.+16     	; 0x157c <__fp_round+0x20>
    156c:	bf 2b       	or	r27, r31
    156e:	11 f4       	brne	.+4      	; 0x1574 <__fp_round+0x18>
    1570:	60 ff       	sbrs	r22, 0
    1572:	04 c0       	rjmp	.+8      	; 0x157c <__fp_round+0x20>
    1574:	6f 5f       	subi	r22, 0xFF	; 255
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	8f 4f       	sbci	r24, 0xFF	; 255
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	08 95       	ret

0000157e <__fp_split3>:
    157e:	57 fd       	sbrc	r21, 7
    1580:	90 58       	subi	r25, 0x80	; 128
    1582:	44 0f       	add	r20, r20
    1584:	55 1f       	adc	r21, r21
    1586:	59 f0       	breq	.+22     	; 0x159e <__fp_splitA+0x10>
    1588:	5f 3f       	cpi	r21, 0xFF	; 255
    158a:	71 f0       	breq	.+28     	; 0x15a8 <__fp_splitA+0x1a>
    158c:	47 95       	ror	r20

0000158e <__fp_splitA>:
    158e:	88 0f       	add	r24, r24
    1590:	97 fb       	bst	r25, 7
    1592:	99 1f       	adc	r25, r25
    1594:	61 f0       	breq	.+24     	; 0x15ae <__fp_splitA+0x20>
    1596:	9f 3f       	cpi	r25, 0xFF	; 255
    1598:	79 f0       	breq	.+30     	; 0x15b8 <__fp_splitA+0x2a>
    159a:	87 95       	ror	r24
    159c:	08 95       	ret
    159e:	12 16       	cp	r1, r18
    15a0:	13 06       	cpc	r1, r19
    15a2:	14 06       	cpc	r1, r20
    15a4:	55 1f       	adc	r21, r21
    15a6:	f2 cf       	rjmp	.-28     	; 0x158c <__fp_split3+0xe>
    15a8:	46 95       	lsr	r20
    15aa:	f1 df       	rcall	.-30     	; 0x158e <__fp_splitA>
    15ac:	08 c0       	rjmp	.+16     	; 0x15be <__fp_splitA+0x30>
    15ae:	16 16       	cp	r1, r22
    15b0:	17 06       	cpc	r1, r23
    15b2:	18 06       	cpc	r1, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	f1 cf       	rjmp	.-30     	; 0x159a <__fp_splitA+0xc>
    15b8:	86 95       	lsr	r24
    15ba:	71 05       	cpc	r23, r1
    15bc:	61 05       	cpc	r22, r1
    15be:	08 94       	sec
    15c0:	08 95       	ret

000015c2 <__fp_zero>:
    15c2:	e8 94       	clt

000015c4 <__fp_szero>:
    15c4:	bb 27       	eor	r27, r27
    15c6:	66 27       	eor	r22, r22
    15c8:	77 27       	eor	r23, r23
    15ca:	cb 01       	movw	r24, r22
    15cc:	97 f9       	bld	r25, 7
    15ce:	08 95       	ret

000015d0 <__mulsf3>:
    15d0:	0b d0       	rcall	.+22     	; 0x15e8 <__mulsf3x>
    15d2:	c4 cf       	rjmp	.-120    	; 0x155c <__fp_round>
    15d4:	b5 df       	rcall	.-150    	; 0x1540 <__fp_pscA>
    15d6:	28 f0       	brcs	.+10     	; 0x15e2 <__mulsf3+0x12>
    15d8:	ba df       	rcall	.-140    	; 0x154e <__fp_pscB>
    15da:	18 f0       	brcs	.+6      	; 0x15e2 <__mulsf3+0x12>
    15dc:	95 23       	and	r25, r21
    15de:	09 f0       	breq	.+2      	; 0x15e2 <__mulsf3+0x12>
    15e0:	a6 cf       	rjmp	.-180    	; 0x152e <__fp_inf>
    15e2:	ab cf       	rjmp	.-170    	; 0x153a <__fp_nan>
    15e4:	11 24       	eor	r1, r1
    15e6:	ee cf       	rjmp	.-36     	; 0x15c4 <__fp_szero>

000015e8 <__mulsf3x>:
    15e8:	ca df       	rcall	.-108    	; 0x157e <__fp_split3>
    15ea:	a0 f3       	brcs	.-24     	; 0x15d4 <__mulsf3+0x4>

000015ec <__mulsf3_pse>:
    15ec:	95 9f       	mul	r25, r21
    15ee:	d1 f3       	breq	.-12     	; 0x15e4 <__mulsf3+0x14>
    15f0:	95 0f       	add	r25, r21
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	55 1f       	adc	r21, r21
    15f6:	62 9f       	mul	r22, r18
    15f8:	f0 01       	movw	r30, r0
    15fa:	72 9f       	mul	r23, r18
    15fc:	bb 27       	eor	r27, r27
    15fe:	f0 0d       	add	r31, r0
    1600:	b1 1d       	adc	r27, r1
    1602:	63 9f       	mul	r22, r19
    1604:	aa 27       	eor	r26, r26
    1606:	f0 0d       	add	r31, r0
    1608:	b1 1d       	adc	r27, r1
    160a:	aa 1f       	adc	r26, r26
    160c:	64 9f       	mul	r22, r20
    160e:	66 27       	eor	r22, r22
    1610:	b0 0d       	add	r27, r0
    1612:	a1 1d       	adc	r26, r1
    1614:	66 1f       	adc	r22, r22
    1616:	82 9f       	mul	r24, r18
    1618:	22 27       	eor	r18, r18
    161a:	b0 0d       	add	r27, r0
    161c:	a1 1d       	adc	r26, r1
    161e:	62 1f       	adc	r22, r18
    1620:	73 9f       	mul	r23, r19
    1622:	b0 0d       	add	r27, r0
    1624:	a1 1d       	adc	r26, r1
    1626:	62 1f       	adc	r22, r18
    1628:	83 9f       	mul	r24, r19
    162a:	a0 0d       	add	r26, r0
    162c:	61 1d       	adc	r22, r1
    162e:	22 1f       	adc	r18, r18
    1630:	74 9f       	mul	r23, r20
    1632:	33 27       	eor	r19, r19
    1634:	a0 0d       	add	r26, r0
    1636:	61 1d       	adc	r22, r1
    1638:	23 1f       	adc	r18, r19
    163a:	84 9f       	mul	r24, r20
    163c:	60 0d       	add	r22, r0
    163e:	21 1d       	adc	r18, r1
    1640:	82 2f       	mov	r24, r18
    1642:	76 2f       	mov	r23, r22
    1644:	6a 2f       	mov	r22, r26
    1646:	11 24       	eor	r1, r1
    1648:	9f 57       	subi	r25, 0x7F	; 127
    164a:	50 40       	sbci	r21, 0x00	; 0
    164c:	8a f0       	brmi	.+34     	; 0x1670 <__mulsf3_pse+0x84>
    164e:	e1 f0       	breq	.+56     	; 0x1688 <__mulsf3_pse+0x9c>
    1650:	88 23       	and	r24, r24
    1652:	4a f0       	brmi	.+18     	; 0x1666 <__mulsf3_pse+0x7a>
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	bb 1f       	adc	r27, r27
    165a:	66 1f       	adc	r22, r22
    165c:	77 1f       	adc	r23, r23
    165e:	88 1f       	adc	r24, r24
    1660:	91 50       	subi	r25, 0x01	; 1
    1662:	50 40       	sbci	r21, 0x00	; 0
    1664:	a9 f7       	brne	.-22     	; 0x1650 <__mulsf3_pse+0x64>
    1666:	9e 3f       	cpi	r25, 0xFE	; 254
    1668:	51 05       	cpc	r21, r1
    166a:	70 f0       	brcs	.+28     	; 0x1688 <__mulsf3_pse+0x9c>
    166c:	60 cf       	rjmp	.-320    	; 0x152e <__fp_inf>
    166e:	aa cf       	rjmp	.-172    	; 0x15c4 <__fp_szero>
    1670:	5f 3f       	cpi	r21, 0xFF	; 255
    1672:	ec f3       	brlt	.-6      	; 0x166e <__mulsf3_pse+0x82>
    1674:	98 3e       	cpi	r25, 0xE8	; 232
    1676:	dc f3       	brlt	.-10     	; 0x166e <__mulsf3_pse+0x82>
    1678:	86 95       	lsr	r24
    167a:	77 95       	ror	r23
    167c:	67 95       	ror	r22
    167e:	b7 95       	ror	r27
    1680:	f7 95       	ror	r31
    1682:	e7 95       	ror	r30
    1684:	9f 5f       	subi	r25, 0xFF	; 255
    1686:	c1 f7       	brne	.-16     	; 0x1678 <__mulsf3_pse+0x8c>
    1688:	fe 2b       	or	r31, r30
    168a:	88 0f       	add	r24, r24
    168c:	91 1d       	adc	r25, r1
    168e:	96 95       	lsr	r25
    1690:	87 95       	ror	r24
    1692:	97 f9       	bld	r25, 7
    1694:	08 95       	ret

00001696 <__udivmodqi4>:
    1696:	99 1b       	sub	r25, r25
    1698:	79 e0       	ldi	r23, 0x09	; 9
    169a:	04 c0       	rjmp	.+8      	; 0x16a4 <__udivmodqi4_ep>

0000169c <__udivmodqi4_loop>:
    169c:	99 1f       	adc	r25, r25
    169e:	96 17       	cp	r25, r22
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <__udivmodqi4_ep>
    16a2:	96 1b       	sub	r25, r22

000016a4 <__udivmodqi4_ep>:
    16a4:	88 1f       	adc	r24, r24
    16a6:	7a 95       	dec	r23
    16a8:	c9 f7       	brne	.-14     	; 0x169c <__udivmodqi4_loop>
    16aa:	80 95       	com	r24
    16ac:	08 95       	ret

000016ae <ltoa>:
    16ae:	fa 01       	movw	r30, r20
    16b0:	cf 93       	push	r28
    16b2:	ff 93       	push	r31
    16b4:	ef 93       	push	r30
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	44 f1       	brlt	.+80     	; 0x170a <ltoa+0x5c>
    16ba:	25 32       	cpi	r18, 0x25	; 37
    16bc:	34 f5       	brge	.+76     	; 0x170a <ltoa+0x5c>
    16be:	c2 2f       	mov	r28, r18
    16c0:	e8 94       	clt
    16c2:	ca 30       	cpi	r28, 0x0A	; 10
    16c4:	49 f4       	brne	.+18     	; 0x16d8 <ltoa+0x2a>
    16c6:	97 fb       	bst	r25, 7
    16c8:	3e f4       	brtc	.+14     	; 0x16d8 <ltoa+0x2a>
    16ca:	90 95       	com	r25
    16cc:	80 95       	com	r24
    16ce:	70 95       	com	r23
    16d0:	61 95       	neg	r22
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	8f 4f       	sbci	r24, 0xFF	; 255
    16d6:	9f 4f       	sbci	r25, 0xFF	; 255
    16d8:	2c 2f       	mov	r18, r28
    16da:	33 27       	eor	r19, r19
    16dc:	44 27       	eor	r20, r20
    16de:	55 27       	eor	r21, r21
    16e0:	ff 93       	push	r31
    16e2:	ef 93       	push	r30
    16e4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__udivmodsi4>
    16e8:	ef 91       	pop	r30
    16ea:	ff 91       	pop	r31
    16ec:	60 5d       	subi	r22, 0xD0	; 208
    16ee:	6a 33       	cpi	r22, 0x3A	; 58
    16f0:	0c f0       	brlt	.+2      	; 0x16f4 <ltoa+0x46>
    16f2:	69 5d       	subi	r22, 0xD9	; 217
    16f4:	61 93       	st	Z+, r22
    16f6:	b9 01       	movw	r22, r18
    16f8:	ca 01       	movw	r24, r20
    16fa:	60 50       	subi	r22, 0x00	; 0
    16fc:	70 40       	sbci	r23, 0x00	; 0
    16fe:	80 40       	sbci	r24, 0x00	; 0
    1700:	90 40       	sbci	r25, 0x00	; 0
    1702:	51 f7       	brne	.-44     	; 0x16d8 <ltoa+0x2a>
    1704:	16 f4       	brtc	.+4      	; 0x170a <ltoa+0x5c>
    1706:	cd e2       	ldi	r28, 0x2D	; 45
    1708:	c1 93       	st	Z+, r28
    170a:	10 82       	st	Z, r1
    170c:	8f 91       	pop	r24
    170e:	9f 91       	pop	r25
    1710:	cf 91       	pop	r28
    1712:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <strrev>

00001716 <strrev>:
    1716:	dc 01       	movw	r26, r24
    1718:	fc 01       	movw	r30, r24
    171a:	67 2f       	mov	r22, r23
    171c:	71 91       	ld	r23, Z+
    171e:	77 23       	and	r23, r23
    1720:	e1 f7       	brne	.-8      	; 0x171a <strrev+0x4>
    1722:	32 97       	sbiw	r30, 0x02	; 2
    1724:	04 c0       	rjmp	.+8      	; 0x172e <strrev+0x18>
    1726:	7c 91       	ld	r23, X
    1728:	6d 93       	st	X+, r22
    172a:	70 83       	st	Z, r23
    172c:	62 91       	ld	r22, -Z
    172e:	ae 17       	cp	r26, r30
    1730:	bf 07       	cpc	r27, r31
    1732:	c8 f3       	brcs	.-14     	; 0x1726 <strrev+0x10>
    1734:	08 95       	ret

00001736 <__udivmodsi4>:
    1736:	a1 e2       	ldi	r26, 0x21	; 33
    1738:	1a 2e       	mov	r1, r26
    173a:	aa 1b       	sub	r26, r26
    173c:	bb 1b       	sub	r27, r27
    173e:	fd 01       	movw	r30, r26
    1740:	0d c0       	rjmp	.+26     	; 0x175c <__udivmodsi4_ep>

00001742 <__udivmodsi4_loop>:
    1742:	aa 1f       	adc	r26, r26
    1744:	bb 1f       	adc	r27, r27
    1746:	ee 1f       	adc	r30, r30
    1748:	ff 1f       	adc	r31, r31
    174a:	a2 17       	cp	r26, r18
    174c:	b3 07       	cpc	r27, r19
    174e:	e4 07       	cpc	r30, r20
    1750:	f5 07       	cpc	r31, r21
    1752:	20 f0       	brcs	.+8      	; 0x175c <__udivmodsi4_ep>
    1754:	a2 1b       	sub	r26, r18
    1756:	b3 0b       	sbc	r27, r19
    1758:	e4 0b       	sbc	r30, r20
    175a:	f5 0b       	sbc	r31, r21

0000175c <__udivmodsi4_ep>:
    175c:	66 1f       	adc	r22, r22
    175e:	77 1f       	adc	r23, r23
    1760:	88 1f       	adc	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	1a 94       	dec	r1
    1766:	69 f7       	brne	.-38     	; 0x1742 <__udivmodsi4_loop>
    1768:	60 95       	com	r22
    176a:	70 95       	com	r23
    176c:	80 95       	com	r24
    176e:	90 95       	com	r25
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	bd 01       	movw	r22, r26
    1776:	cf 01       	movw	r24, r30
    1778:	08 95       	ret

0000177a <_exit>:
    177a:	f8 94       	cli

0000177c <__stop_program>:
    177c:	ff cf       	rjmp	.-2      	; 0x177c <__stop_program>
